From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: booky10 <boooky10@gmail.com>
Date: Mon, 27 May 2024 03:13:37 +0200
Subject: [PATCH] Add option to translate custom item names and lore


diff --git a/src/main/java/dev/booky/cloudplane/CloudPlaneConfig.java b/src/main/java/dev/booky/cloudplane/CloudPlaneConfig.java
index b3402ff1789cf0e2ec661282a3ee7bad3f627041..ec8bdaa81a924e7d5eaf5c74b1c4cc2121fa3c8e 100644
--- a/src/main/java/dev/booky/cloudplane/CloudPlaneConfig.java
+++ b/src/main/java/dev/booky/cloudplane/CloudPlaneConfig.java
@@ -117,4 +117,20 @@ public class CloudPlaneConfig {
         }
         detailedBrand = getBoolean("settings.detailed-brand-info", detailedBrand);
     }
+
+    public static boolean localizeItems = true;
+    private static void adventure() {
+        if (version <= 2) {
+            localizeItems = getBoolean("settings.localize.items", localizeItems);
+            set("settings.adventure.localize-items", localizeItems);
+            set("settings.localize", null);
+        }
+        if (version <= 3) {
+            localizeItems = getBoolean("settings.adventure.localize-items", localizeItems);
+            set("settings.translate-items", localizeItems);
+            set("settings.adventure", null);
+        }
+
+        localizeItems = getBoolean("settings.translate-items", localizeItems);
+    }
 }
diff --git a/src/main/java/dev/booky/cloudplane/ItemUtil.java b/src/main/java/dev/booky/cloudplane/ItemUtil.java
index cc19d9e75233465cbf28f65aecfdf498d4339a63..e379800c5bae90c9751f717318af6a82fa70f061 100644
--- a/src/main/java/dev/booky/cloudplane/ItemUtil.java
+++ b/src/main/java/dev/booky/cloudplane/ItemUtil.java
@@ -1,18 +1,200 @@
 package dev.booky.cloudplane;
 
+import com.mojang.datafixers.util.Pair;
+import com.mojang.serialization.Codec;
+import it.unimi.dsi.fastutil.objects.Reference2ObjectArrayMap;
+import it.unimi.dsi.fastutil.objects.Reference2ObjectMap;
 import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.TextComponent;
+import net.minecraft.core.component.DataComponentPatch;
+import net.minecraft.core.component.DataComponentPredicate;
+import net.minecraft.core.component.DataComponentType;
+import net.minecraft.core.component.DataComponents;
+import net.minecraft.core.component.TypedDataComponent;
+import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.NbtOps;
+import net.minecraft.nbt.Tag;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.component.CustomData;
+import net.minecraft.world.item.component.ItemLore;
+import net.minecraft.world.item.trading.ItemCost;
 import org.apache.commons.lang3.StringUtils;
 
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
+import java.util.Optional;
+import java.util.Set;
+
+import static net.minecraft.core.component.DataComponents.CUSTOM_DATA;
 
 public final class ItemUtil {
 
+    private static final Set<DataComponentType<?>> SAVEABLE_COMPONENT_TYPE_SET = Set.of(
+        DataComponents.ITEM_NAME, DataComponents.CUSTOM_NAME, DataComponents.LORE
+    );
+    private static final List<Pair<String, DataComponentType<?>>> SAVEABLE_COMPONENT_TYPES = SAVEABLE_COMPONENT_TYPE_SET.stream()
+        .<Pair<String, DataComponentType<?>>>map(type -> Pair.of(BuiltInRegistries.DATA_COMPONENT_TYPE.getKey(type).toString(), type))
+        .toList();
+    private static final String SAVEABLE_COMPONENT_TAG_NAME = "CloudPlane$SavedData";
+
     private ItemUtil() {
     }
 
+    @SuppressWarnings("unchecked") // not unchecked
+    public static void unpackPatchSaves(ItemStack stack) {
+        CustomData customData = stack.getOrDefault(CUSTOM_DATA, CustomData.EMPTY);
+        if (customData.isEmpty() || !customData.contains(SAVEABLE_COMPONENT_TAG_NAME)) {
+            return; // nothing to unpack
+        }
+        CompoundTag savedTag = customData.getUnsafe().getCompound(SAVEABLE_COMPONENT_TAG_NAME);
+        for (Pair<String, DataComponentType<?>> type : SAVEABLE_COMPONENT_TYPES) {
+            Tag encoded = savedTag.get(type.getFirst());
+            if (encoded == null) {
+                continue; // nothing saved for this type, skip
+            }
+            Object decoded = type.getSecond().codecOrThrow()
+                .decode(NbtOps.INSTANCE, encoded)
+                .getOrThrow().getFirst();
+            stack.set((DataComponentType<Object>) type.getSecond(), decoded);
+        }
+        // generally unsafe to do, but this probably won't cause any issues at this place
+        customData.getUnsafe().remove(SAVEABLE_COMPONENT_TAG_NAME);
+    }
+
+    @SuppressWarnings("unchecked") // not unchecked
+    public static DataComponentPatch packPatchSaves(ItemStack stack) {
+        Reference2ObjectMap<DataComponentType<?>, Optional<?>> patch = stack.components.patch;
+        if (patch == null || patch.isEmpty()) {
+            return DataComponentPatch.EMPTY; // no patches, skip complex logic
+        }
+
+        CompoundTag savedTag = null; // lazy-loaded
+        for (Pair<String, DataComponentType<?>> type : SAVEABLE_COMPONENT_TYPES) {
+            Optional<?> value = patch.get(type.getSecond());
+            if (value == null || value.isEmpty()) {
+                continue;
+            }
+            if (savedTag == null) {
+                savedTag = new CompoundTag();
+            }
+            Codec<Object> codec = ((DataComponentType<Object>) type.getSecond()).codecOrThrow();
+            Tag encoded = codec.encodeStart(NbtOps.INSTANCE, value.get()).getOrThrow();
+            savedTag.put(type.getFirst(), encoded);
+        }
+        if (savedTag == null) { // nothing found to be saved, return original
+            return new DataComponentPatch(patch);
+        }
+
+        // add saved data to custom data component
+        CompoundTag tag = stack.getOrDefault(CUSTOM_DATA, CustomData.EMPTY).copyTag();
+        tag.put(SAVEABLE_COMPONENT_TAG_NAME, savedTag);
+
+        // copy patch map, prevents modification of original item stack
+        Reference2ObjectMap<DataComponentType<?>, Optional<?>> newPatch =
+            new Reference2ObjectArrayMap<>(patch.size() + 1);
+        newPatch.putAll(patch);
+        newPatch.put(CUSTOM_DATA, Optional.of(CustomData.of(tag)));
+        return new DataComponentPatch(newPatch);
+    }
+
+    @SuppressWarnings("unchecked") // not unchecked
+    public static ItemCost unpackPatchSaves(ItemCost cost) {
+        List<TypedDataComponent<?>> components = cost.components().expectedComponents;
+        CustomData customData = null;
+        for (TypedDataComponent<?> component : components) {
+            if (component.type() == CUSTOM_DATA) {
+                customData = (CustomData) component.value();
+                break;
+            }
+        }
+        if (customData == null || customData.isEmpty()
+            || !customData.contains(SAVEABLE_COMPONENT_TAG_NAME)) {
+            return cost; // nothing to unpack
+        }
+        CompoundTag savedTag = customData.getUnsafe().getCompound(SAVEABLE_COMPONENT_TAG_NAME);
+        components = new ArrayList<>(components);
+        crying:
+        for (Pair<String, DataComponentType<?>> type : SAVEABLE_COMPONENT_TYPES) {
+            Tag encoded = savedTag.get(type.getFirst());
+            if (encoded == null) {
+                continue; // nothing saved for this type, skip
+            }
+            Object decoded = type.getSecond().codecOrThrow()
+                .decode(NbtOps.INSTANCE, encoded)
+                .getOrThrow().getFirst();
+            TypedDataComponent<Object> newComponent = new TypedDataComponent<>(
+                (DataComponentType<Object>) type.getSecond(), decoded);
+
+            for (int i = 0; i < components.size(); i++) {
+                TypedDataComponent<?> component = components.get(i);
+                if (component.type() == type) {
+                    components.set(i, newComponent);
+                    continue crying;
+                }
+            }
+            components.add(newComponent);
+        }
+        // generally unsafe to do, but this probably won't cause any issues at this place
+        customData.getUnsafe().remove(SAVEABLE_COMPONENT_TAG_NAME);
+        cost.components().expectedComponents = components;
+        return cost;
+    }
+
+    public static ItemCost packPatchSaves(ItemCost cost) {
+        List<TypedDataComponent<?>> components = cost.components().expectedComponents;
+        if (components == null || components.isEmpty()) {
+            return cost; // no expected components, skip complex logic
+        }
+
+        int existingCustomDataIndex = -1;
+        CustomData existingCustomData = null;
+        CompoundTag savedTag = null; // lazy-loaded
+        for (int i = 0; i < components.size(); i++) {
+            TypedDataComponent<?> component = components.get(i);
+            if (component.type() == CUSTOM_DATA) {
+                existingCustomDataIndex = i;
+                existingCustomData = (CustomData) component.value();
+                continue;
+            }
+            if (!SAVEABLE_COMPONENT_TYPE_SET.contains(component.type())
+                || component.value() instanceof ItemLore lore && lore.lines().isEmpty()) {
+                continue; // doesn't need to be saved
+            }
+            if (savedTag == null) {
+                savedTag = new CompoundTag();
+            }
+            Tag encoded = component.encodeValue(NbtOps.INSTANCE).getOrThrow();
+            String key = BuiltInRegistries.DATA_COMPONENT_TYPE.getKey(component.type()).toString();
+            savedTag.put(key, encoded);
+        }
+        if (savedTag == null) { // nothing found to be saved, return original
+            return cost;
+        }
+
+        // add saved data to custom data component
+        CompoundTag tag = (existingCustomData == null ? CustomData.EMPTY : existingCustomData).copyTag();
+        tag.put(SAVEABLE_COMPONENT_TAG_NAME, savedTag);
+
+        // create new item cost predicate with packed data
+        TypedDataComponent<CustomData> newComponent = new TypedDataComponent<>(
+            CUSTOM_DATA, CustomData.of(tag));
+        if (existingCustomDataIndex != -1) { // replace existing
+            components = new ArrayList<>(components);
+            components.set(existingCustomDataIndex, newComponent);
+        } else { // add new
+            List<TypedDataComponent<?>> prevComponents = components;
+            components = new ArrayList<>(components.size() + 1);
+            components.addAll(prevComponents);
+            components.add(newComponent);
+        }
+
+        // components aren't made immutable here, but doesn't matter
+        DataComponentPredicate componentsPredicate = new DataComponentPredicate(components);
+        return new ItemCost(cost.item(), cost.count(), componentsPredicate, cost.itemStack());
+    }
+
     private static List<Component> inlineComponent(Component component) {
         component = component.compact();
         if (component.children().isEmpty()) {
diff --git a/src/main/java/net/minecraft/core/component/DataComponentPatch.java b/src/main/java/net/minecraft/core/component/DataComponentPatch.java
index cee4a0639b3c73e300a8450f8a831cb4a71958ba..7d91f063b60457aec7f7c51c94343a6c6f9e33ff 100644
--- a/src/main/java/net/minecraft/core/component/DataComponentPatch.java
+++ b/src/main/java/net/minecraft/core/component/DataComponentPatch.java
@@ -156,7 +156,7 @@ public final class DataComponentPatch {
     private static final String REMOVED_PREFIX = "!";
     final Reference2ObjectMap<DataComponentType<?>, Optional<?>> map;
 
-    DataComponentPatch(Reference2ObjectMap<DataComponentType<?>, Optional<?>> changedComponents) {
+    public DataComponentPatch(Reference2ObjectMap<DataComponentType<?>, Optional<?>> changedComponents) { // CloudPlane - package-private -> public
         this.map = changedComponents;
     }
 
diff --git a/src/main/java/net/minecraft/core/component/DataComponentPredicate.java b/src/main/java/net/minecraft/core/component/DataComponentPredicate.java
index 97204a0ff57691d71d7a9879e5ff7246da7af23f..8a1cd7c10cc4777e909bd6a6e4a4caf6e97a623c 100644
--- a/src/main/java/net/minecraft/core/component/DataComponentPredicate.java
+++ b/src/main/java/net/minecraft/core/component/DataComponentPredicate.java
@@ -24,9 +24,9 @@ public final class DataComponentPredicate implements Predicate<DataComponentMap>
         .apply(ByteBufCodecs.list())
         .map(DataComponentPredicate::new, predicate -> predicate.expectedComponents);
     public static final DataComponentPredicate EMPTY = new DataComponentPredicate(List.of());
-    private final List<TypedDataComponent<?>> expectedComponents;
+    public List<TypedDataComponent<?>> expectedComponents; // CloudPlane - private-f -> public
 
-    DataComponentPredicate(List<TypedDataComponent<?>> components) {
+    public DataComponentPredicate(List<TypedDataComponent<?>> components) { // CloudPlane - private -> public
         this.expectedComponents = components;
     }
 
diff --git a/src/main/java/net/minecraft/core/component/PatchedDataComponentMap.java b/src/main/java/net/minecraft/core/component/PatchedDataComponentMap.java
index 22da75d8197de29a150c9eade7994deecae53a10..c026a6edf497c86be3b3f1b511bb285701173a88 100644
--- a/src/main/java/net/minecraft/core/component/PatchedDataComponentMap.java
+++ b/src/main/java/net/minecraft/core/component/PatchedDataComponentMap.java
@@ -16,7 +16,7 @@ import javax.annotation.Nullable;
 
 public final class PatchedDataComponentMap implements DataComponentMap {
     private final DataComponentMap prototype;
-    private Reference2ObjectMap<DataComponentType<?>, Optional<?>> patch;
+    public Reference2ObjectMap<DataComponentType<?>, Optional<?>> patch; // CloudPlane - private -> public
     private boolean copyOnWrite;
 
     public PatchedDataComponentMap(DataComponentMap baseComponents) {
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index eec0ec43590be7e8ae5b530a7404c98b5e23cb53..ee75966f66ceab3516b830291c197d21fd6f4cb3 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -168,6 +168,11 @@ public final class ItemStack implements DataComponentHolder {
                 if (false && !datacomponentpatch.isEmpty()) { // Paper - This is no longer needed with raw NBT being handled in metadata
                     CraftItemStack.setItemMeta(itemstack, CraftItemStack.getItemMeta(itemstack));
                 }
+                // CloudPlane start - item localization
+                if (dev.booky.cloudplane.CloudPlaneConfig.localizeItems) {
+                    dev.booky.cloudplane.ItemUtil.unpackPatchSaves(itemstack);
+                }
+                // CloudPlane end - item localization
                 return itemstack;
                 // CraftBukkit end
             }
@@ -183,15 +188,23 @@ public final class ItemStack implements DataComponentHolder {
                 // CraftItemStack.setItemMeta(itemstack, CraftItemStack.getItemMeta(itemstack)); // Paper - This is no longer with raw NBT being handled in metadata
                 // Spigot end
                 ITEM_STREAM_CODEC.encode(registryfriendlybytebuf, itemstack.getItemHolder()); // CraftBukkit - decompile error
+                // CloudPlane start - item localization
+                if (dev.booky.cloudplane.CloudPlaneConfig.localizeItems
+                        && registryfriendlybytebuf.adventure$locale != null) {
+                    DataComponentPatch.STREAM_CODEC.encode(registryfriendlybytebuf,
+                            dev.booky.cloudplane.ItemUtil.packPatchSaves(itemstack));
+                } else {
+                // CloudPlane end - item localization
                 // Paper start - adventure; conditionally render translatable components
                 boolean prev = net.minecraft.network.chat.ComponentSerialization.DONT_RENDER_TRANSLATABLES.get();
                 try {
                     net.minecraft.network.chat.ComponentSerialization.DONT_RENDER_TRANSLATABLES.set(true);
-                DataComponentPatch.STREAM_CODEC.encode(registryfriendlybytebuf, itemstack.components.asPatch());
+                DataComponentPatch.STREAM_CODEC.encode(registryfriendlybytebuf, itemstack.components.asPatch()); // CloudPlane - item localization; diff on change
                 } finally {
                     net.minecraft.network.chat.ComponentSerialization.DONT_RENDER_TRANSLATABLES.set(prev);
                 }
                 // Paper end - adventure; conditionally render translatable components
+                } // CloudPlane - item localization
             }
         }
     };
@@ -225,7 +238,7 @@ public final class ItemStack implements DataComponentHolder {
     @Deprecated
     @Nullable
     private Item item;
-    private PatchedDataComponentMap components;
+    public PatchedDataComponentMap components; // CloudPlane - private -> public
     @Nullable
     private Entity entityRepresentation;
 
diff --git a/src/main/java/net/minecraft/world/item/component/ItemLore.java b/src/main/java/net/minecraft/world/item/component/ItemLore.java
index e4bc72ffd982a06a71bfa1c20f4e66e13cf3234a..cda383fb63889177a96e85f41151dce92a891692 100644
--- a/src/main/java/net/minecraft/world/item/component/ItemLore.java
+++ b/src/main/java/net/minecraft/world/item/component/ItemLore.java
@@ -41,6 +41,36 @@ public record ItemLore(List<Component> lines, List<Component> styledLines) imple
             }
             return realLines;
         })
+        // CloudPlane start - item localization; line splitting support
+        .<List<Component>>apply(codec -> new StreamCodec<>() {
+            @Override
+            public List<Component> decode(RegistryFriendlyByteBuf buf) {
+                return codec.decode(buf);
+            }
+
+            @Override
+            public void encode(RegistryFriendlyByteBuf buf, List<Component> value) {
+                if (dev.booky.cloudplane.CloudPlaneConfig.localizeItems && buf.adventure$locale != null) {
+                    // pre-render translations here to work around line splitting not working anymore
+                    boolean prevNoRender = ComponentSerialization.DONT_RENDER_TRANSLATABLES.get();
+                    try {
+                        ComponentSerialization.DONT_RENDER_TRANSLATABLES.set(true);
+                        List<Component> lines = Lists.newArrayListWithCapacity(value.size());
+                        for (Component line : value) {
+                            net.kyori.adventure.text.Component advLine = io.papermc.paper.adventure.PaperAdventure.asAdventure(line);
+                            net.kyori.adventure.text.Component i18nLine = net.kyori.adventure.translation.GlobalTranslator.render(advLine, buf.adventure$locale);
+                            lines.add(io.papermc.paper.adventure.PaperAdventure.asVanilla(i18nLine));
+                        }
+                        codec.encode(buf, lines);
+                    } finally {
+                        ComponentSerialization.DONT_RENDER_TRANSLATABLES.set(prevNoRender);
+                    }
+                } else {
+                    codec.encode(buf, value);
+                }
+            }
+        })
+        // CloudPlane end - item localization; line splitting support
         .map(ItemLore::new, ItemLore::lines);
     // CloudPlane end - split lore lines
 
diff --git a/src/main/java/net/minecraft/world/item/trading/ItemCost.java b/src/main/java/net/minecraft/world/item/trading/ItemCost.java
index 5b365afe523c6f07f156a594737dd58b60ab3d7f..b9cbd081c84904c7701f05b70dd73f16cc15e74d 100644
--- a/src/main/java/net/minecraft/world/item/trading/ItemCost.java
+++ b/src/main/java/net/minecraft/world/item/trading/ItemCost.java
@@ -33,7 +33,7 @@ public record ItemCost(Holder<Item> item, int count, DataComponentPredicate comp
         DataComponentPredicate.STREAM_CODEC,
         ItemCost::components,
         ItemCost::new
-    );
+    ).map(dev.booky.cloudplane.ItemUtil::unpackPatchSaves, dev.booky.cloudplane.ItemUtil::packPatchSaves); // CloudPlane - item translations; fix merchant offers de-sync
     public static final StreamCodec<RegistryFriendlyByteBuf, Optional<ItemCost>> OPTIONAL_STREAM_CODEC = STREAM_CODEC.apply(ByteBufCodecs::optional);
 
     public ItemCost(ItemLike item) {
