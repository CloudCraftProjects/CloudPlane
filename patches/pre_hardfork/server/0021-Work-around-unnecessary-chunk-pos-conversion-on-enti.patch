From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: booky10 <boooky10@gmail.com>
Date: Fri, 20 Sep 2024 00:56:09 +0200
Subject: [PATCH] Work around unnecessary chunk pos conversion on entity
 tracker visibility check

Should slightly improve performance of entity tracker

diff --git a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/player/RegionizedPlayerChunkLoader.java b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/player/RegionizedPlayerChunkLoader.java
index a608f57ebca98eda88ad749d0aad021678be54f9..8b3cfda3ca76513363c84926de7e6c1d7fc48604 100644
--- a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/player/RegionizedPlayerChunkLoader.java
+++ b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/player/RegionizedPlayerChunkLoader.java
@@ -268,18 +268,26 @@ public final class RegionizedPlayerChunkLoader {
         return sendViewDistance;
     }
 
+    // CloudPlane start - work around unnecessary chunk pos conversion
+    @Deprecated
+    @io.papermc.paper.annotation.DoNotUse
     public boolean isChunkSent(final ServerPlayer player, final int chunkX, final int chunkZ, final boolean borderOnly) {
         return borderOnly ? this.isChunkSentBorderOnly(player, chunkX, chunkZ) : this.isChunkSent(player, chunkX, chunkZ);
     }
 
     public boolean isChunkSent(final ServerPlayer player, final int chunkX, final int chunkZ) {
+        return this.isChunkSent(player, CoordinateUtils.getChunkKey(chunkX, chunkZ));
+    }
+
+    public boolean isChunkSent(final ServerPlayer player, final long chunkKey) {
         final PlayerChunkLoaderData loader = ((ChunkSystemServerPlayer)player).moonrise$getChunkLoader();
         if (loader == null) {
             return false;
         }
 
-        return loader.sentChunks.contains(CoordinateUtils.getChunkKey(chunkX, chunkZ));
+        return loader.sentChunks.contains(chunkKey);
     }
+    // CloudPlane end - work around unnecessary chunk pos conversion
 
     public boolean isChunkSentBorderOnly(final ServerPlayer player, final int chunkX, final int chunkZ) {
         final PlayerChunkLoaderData loader = ((ChunkSystemServerPlayer)player).moonrise$getChunkLoader();
diff --git a/src/main/java/net/minecraft/server/level/ChunkHolder.java b/src/main/java/net/minecraft/server/level/ChunkHolder.java
index 4db96543e2072e47040bb25a9d97ea6a69c4a43d..2fe851bfd142638e6dd1c5b21691e00c6b7ad4a3 100644
--- a/src/main/java/net/minecraft/server/level/ChunkHolder.java
+++ b/src/main/java/net/minecraft/server/level/ChunkHolder.java
@@ -97,7 +97,7 @@ public class ChunkHolder extends GenerationChunkHolder implements ca.spottedleaf
         final ServerPlayer[] raw = this.playersSentChunkTo.getRawDataUnchecked();
         for (int i = 0, len = this.playersSentChunkTo.size(); i < len; ++i) {
             final ServerPlayer player = raw[i];
-            if (onlyOnWatchDistanceEdge && !((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)this.getChunkMap().level).moonrise$getPlayerChunkLoader().isChunkSent(player, this.pos.x, this.pos.z, onlyOnWatchDistanceEdge)) {
+            if (onlyOnWatchDistanceEdge && !((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)this.getChunkMap().level).moonrise$getPlayerChunkLoader().isChunkSentBorderOnly(player, this.pos.x, this.pos.z)) { // CloudPlane - work around unnecessary chunk pos conversion
                 continue;
             }
             ret.add(player);
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 25d53662a4982a289e67dceba172b5c6e7f9b3ee..dfea98dc0bff5abdf4d8088ef8b26d4473b96911 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -284,13 +284,19 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         return d2 * d2 + d3 * d3;
     }
 
+    // CloudPlane start - work around unnecessary chunk pos conversion
     boolean isChunkTracked(ServerPlayer player, int chunkX, int chunkZ) {
-        return ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)this.level).moonrise$getPlayerChunkLoader().isChunkSent(player, chunkX, chunkZ); // Paper - rewrite chunk system
+        return this.isChunkTracked(player, ca.spottedleaf.moonrise.common.util.CoordinateUtils.getChunkKey(chunkX, chunkZ));
+    }
+
+    boolean isChunkTracked(ServerPlayer player, long chunkKey) {
+        return ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)this.level).moonrise$getPlayerChunkLoader().isChunkSent(player, chunkKey); // Paper - rewrite chunk system
     }
 
     private boolean isChunkOnTrackedBorder(ServerPlayer player, int chunkX, int chunkZ) {
-        return ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)this.level).moonrise$getPlayerChunkLoader().isChunkSent(player, chunkX, chunkZ, true); // Paper - rewrite chunk system
+        return ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)this.level).moonrise$getPlayerChunkLoader().isChunkSentBorderOnly(player, chunkX, chunkZ); // Paper - rewrite chunk system
     }
+    // CloudPlane end - work around unnecessary chunk pos conversion
 
     protected ThreadedLevelLightEngine getLightEngine() {
         return this.lightEngine;
@@ -1254,7 +1260,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
                         flag = vec3d_dy * vec3d_dy <= rangeY * rangeY;
                     }
                 }
-                flag = flag && this.entity.broadcastToPlayer(player) && ChunkMap.this.isChunkTracked(player, this.entity.chunkPosition().x, this.entity.chunkPosition().z);
+                flag = flag && this.entity.broadcastToPlayer(player) && ChunkMap.this.isChunkTracked(player, this.entity.chunkPosition().longKey); // CloudPlane - work around unnecessary chunk pos conversion
                 // Paper end - Configurable entity tracking range by Y
 
                 // CraftBukkit start - respect vanish API
