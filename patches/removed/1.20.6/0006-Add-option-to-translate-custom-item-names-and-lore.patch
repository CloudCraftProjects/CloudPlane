From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: booky10 <boooky10@gmail.com>
Date: Sun, 22 Aug 2021 20:30:16 +0200
Subject: [PATCH] Add option to translate custom item names and lore

This patch was completely rewritten with the 1.20.5/1.20.6 update

diff --git a/src/main/java/dev/booky/cloudplane/CloudPlaneConfig.java b/src/main/java/dev/booky/cloudplane/CloudPlaneConfig.java
index 26e393051d2c5fe84b8ae6a33b376efab6198816..b21f7a41581ddf36d61e206366c6398738a47813 100644
--- a/src/main/java/dev/booky/cloudplane/CloudPlaneConfig.java
+++ b/src/main/java/dev/booky/cloudplane/CloudPlaneConfig.java
@@ -107,4 +107,20 @@ public class CloudPlaneConfig {
     private static Component getComponent(String path, Component def) {
         return MiniMessage.miniMessage().deserialize(getString(path, MiniMessage.miniMessage().serialize(def)));
     }
+
+    public static boolean localizeItems = true;
+    private static void adventure() {
+        if (version <= 2) {
+            localizeItems = getBoolean("settings.localize.items", localizeItems);
+            set("settings.adventure.localize-items", localizeItems);
+            set("settings.localize", null);
+        }
+        if (version <= 3) {
+            localizeItems = getBoolean("settings.adventure.localize-items", localizeItems);
+            set("settings.translate-items", localizeItems);
+            set("settings.adventure", null);
+        }
+
+        localizeItems = getBoolean("settings.translate-items", localizeItems);
+    }
 }
diff --git a/src/main/java/dev/booky/cloudplane/ComponentUtil.java b/src/main/java/dev/booky/cloudplane/ComponentUtil.java
new file mode 100644
index 0000000000000000000000000000000000000000..a9a0117234026f119a64c2ae6c51473015ae2eab
--- /dev/null
+++ b/src/main/java/dev/booky/cloudplane/ComponentUtil.java
@@ -0,0 +1,70 @@
+package dev.booky.cloudplane;
+
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.TextComponent;
+import org.apache.commons.lang3.StringUtils;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+public final class ComponentUtil {
+
+    private ComponentUtil() {
+    }
+
+    private static List<Component> inlineComponent(Component component) {
+        component = component.compact();
+        if (component.children().isEmpty()) {
+            return List.of(component);
+        }
+
+        List<Component> components = new ArrayList<>(5);
+        inlineComponent0(components, component);
+        return components;
+    }
+
+    private static void inlineComponent0(List<Component> components, Component component) {
+        components.add(component.children(List.of()));
+        for (Component child : component.children()) {
+            inlineComponent0(components, child.applyFallbackStyle(component.style()));
+        }
+    }
+
+    public static List<Component> getLines(Component component) {
+        List<Component> parts = inlineComponent(component);
+
+        List<Component> components = new ArrayList<>(parts.size());
+        List<Component> currentComponents = new ArrayList<>(parts.size());
+
+        for (Component part : parts) {
+            if (!(part instanceof TextComponent textComp)) {
+                currentComponents.add(part);
+                continue;
+            }
+
+            String[] strings = StringUtils.splitPreserveAllTokens(textComp.content(), '\n');
+            if (strings.length == 1) {
+                currentComponents.add(part);
+                continue;
+            }
+
+            for (int i = 0; i < strings.length; i++) {
+                if (i != 0) {
+                    components.add(Component.text().append(currentComponents).build());
+                    currentComponents.clear();
+                }
+
+                String string = strings[i];
+                if (!string.isEmpty()) {
+                    currentComponents.add(Component.text(string, part.style()));
+                }
+            }
+        }
+
+        if (!currentComponents.isEmpty()) {
+            components.add(Component.text().append(currentComponents).build());
+        }
+        return Collections.unmodifiableList(components);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/adventure/PaperAdventure.java b/src/main/java/io/papermc/paper/adventure/PaperAdventure.java
index cf5a4c142ed6d9ab4850373a9041bdc6af5a2a71..d9cba5921b3917cc024381abdde7b56832392836 100644
--- a/src/main/java/io/papermc/paper/adventure/PaperAdventure.java
+++ b/src/main/java/io/papermc/paper/adventure/PaperAdventure.java
@@ -217,7 +217,7 @@ public final class PaperAdventure {
         return PlainTextComponentSerializer.plainText().serialize(translated(component, locale));
     }
 
-    private static Component translated(final Component component, final Locale locale) {
+    public static Component translated(final Component component, final Locale locale) { // CloudPlane - private -> public
         //noinspection ConstantValue
         return GlobalTranslator.render(
             component,
diff --git a/src/main/java/net/minecraft/network/FriendlyByteBuf.java b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
index b863249ff7e13cf4939c8961601f0564c62fd661..4ee4c481d45db484d82e434fa95eeb9a15ba312a 100644
--- a/src/main/java/net/minecraft/network/FriendlyByteBuf.java
+++ b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
@@ -652,6 +652,56 @@ public class FriendlyByteBuf extends ByteBuf {
                 // CraftItemStack.setItemMeta(stack, CraftItemStack.getItemMeta(stack)); // Paper - This is no longer with raw NBT being handled in metadata
                 // Spigot end
                 nbttagcompound = stack.getTag();
+
+                // CloudPlane start
+                if (nbttagcompound != null && dev.booky.cloudplane.CloudPlaneConfig.localizeItems
+                        && nbttagcompound.contains(ItemStack.TAG_DISPLAY, Tag.TAG_COMPOUND)
+                        && this.adventure$locale != null) {
+                    final CompoundTag display = nbttagcompound.getCompound(ItemStack.TAG_DISPLAY);
+
+                    final String name = display.getString(ItemStack.TAG_DISPLAY_NAME);
+                    if (!name.isEmpty()) {
+                        display.putString("OriginalName", name);
+
+                        try {
+                            final net.kyori.adventure.text.Component nameComponent = net.kyori.adventure.text.serializer.gson.GsonComponentSerializer.gson().deserialize(name);
+                            display.putString(ItemStack.TAG_DISPLAY_NAME, io.papermc.paper.adventure.PaperAdventure.asJsonString(nameComponent, this.adventure$locale));
+                        } catch (com.google.gson.JsonSyntaxException exception) {
+                            // just print the exception in console and ignore the lore part which is broken
+                            com.mojang.logging.LogUtils.getLogger().warn("Error while trying to localize name of item: '" + name + "'", exception);
+                            display.remove(ItemStack.TAG_DISPLAY_NAME); // prevent errors on the client
+                        }
+                    }
+
+                    if (display.contains(ItemStack.TAG_LORE, Tag.TAG_LIST)) {
+                        final net.minecraft.nbt.ListTag lore = display.getList(ItemStack.TAG_LORE, Tag.TAG_STRING);
+                        if (!lore.isEmpty()) {
+                            display.put("OriginalLore", lore);
+
+                            final net.minecraft.nbt.ListTag newLore = new net.minecraft.nbt.ListTag();
+                            for (int i = 0; i < lore.size(); i++) {
+                                String lorePart = lore.getString(i);
+                                try {
+                                    final net.kyori.adventure.text.Component loreComponent = net.kyori.adventure.text.serializer.gson.GsonComponentSerializer.gson().deserialize(lorePart);
+                                    final net.kyori.adventure.text.Component translatedLoreComponent = io.papermc.paper.adventure.PaperAdventure.translated(loreComponent, this.adventure$locale);
+                                    for (final net.kyori.adventure.text.Component line : dev.booky.cloudplane.ComponentUtil.getLines(translatedLoreComponent)) {
+                                        newLore.add(net.minecraft.nbt.StringTag.valueOf(net.kyori.adventure.text.serializer.gson.GsonComponentSerializer.gson().serialize(line)));
+                                    }
+                                } catch (com.google.gson.JsonSyntaxException exception) {
+                                    // just print the exception in console and ignore the lore part which is broken
+                                    com.mojang.logging.LogUtils.getLogger().warn("Error while trying to localize lore part of item: '" + lorePart + "'", exception);
+                                }
+                            }
+
+                            if (newLore.isEmpty()) {
+                                display.remove(ItemStack.TAG_LORE);
+                            } else {
+                                display.put(ItemStack.TAG_LORE, newLore);
+                            }
+                        }
+                    }
+                }
+                // CloudPlane end
             }
 
             this.writeNbt(nbttagcompound);
@@ -668,7 +718,22 @@ public class FriendlyByteBuf extends ByteBuf {
             byte b0 = this.readByte();
             ItemStack itemstack = new ItemStack(item, b0);
 
-            itemstack.setTag(this.readNbt());
+            // CloudPlane start
+            CompoundTag nbt = this.readNbt();
+            if (nbt != null && nbt.contains(ItemStack.TAG_DISPLAY, Tag.TAG_COMPOUND)) {
+                CompoundTag display = nbt.getCompound(ItemStack.TAG_DISPLAY);
+                if (display.contains("OriginalName", Tag.TAG_STRING)) {
+                    display.putString(ItemStack.TAG_DISPLAY_NAME, display.getString("OriginalName"));
+                    display.remove("OriginalName");
+                }
+                if (display.contains("OriginalLore", Tag.TAG_LIST)) {
+                    display.put(ItemStack.TAG_LORE, display.getList("OriginalLore", Tag.TAG_STRING));
+                    display.remove("OriginalLore");
+                }
+            }
+            itemstack.setTag(nbt);
+            // CloudPlane end
+
             // CraftBukkit start
             if (false && itemstack.getTag() != null) { // Paper - This is no longer needed with raw NBT being handled in metadata
                 CraftItemStack.setItemMeta(itemstack, CraftItemStack.getItemMeta(itemstack));
