From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: booky10 <boooky10@gmail.com>
Date: Sun, 5 Jan 2025 20:48:30 +0100
Subject: [PATCH] Convert spawn category limits and ticks to array


diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 59578240299afe459678d039f5ba189078dbd5cb..83147a7ed08ea715465d1e0b6bbb464db3bc81f9 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -294,7 +294,7 @@ public final class CraftServer implements Server {
     private final EntityMetadataStore entityMetadata = new EntityMetadataStore();
     private final PlayerMetadataStore playerMetadata = new PlayerMetadataStore();
     private final WorldMetadataStore worldMetadata = new WorldMetadataStore();
-    private final Object2IntOpenHashMap<SpawnCategory> spawnCategoryLimit = new Object2IntOpenHashMap<>();
+    private final int[] spawnCategoryLimit = new int[SpawnCategory.values().length]; // CloudPlane - convert spawn category limits to array
     private File container;
     private WarningState warningState = WarningState.DEFAULT;
     public ApiVersion minimumAPI;
@@ -477,6 +477,7 @@ public final class CraftServer implements Server {
         this.saveCommandsConfig();
         this.overrideAllCommandBlockCommands = this.commandsConfiguration.getStringList("command-block-overrides").contains("*");
         this.ignoreVanillaPermissions = this.commandsConfiguration.getBoolean("ignore-vanilla-permissions");
+        java.util.Arrays.fill(this.spawnCategoryLimit, -1); // CloudPlane - convert spawn category limits to array
         this.overrideSpawnLimits();
         console.autosavePeriod = this.configuration.getInt("ticks-per.autosave");
         this.warningState = WarningState.value(this.configuration.getString("settings.deprecated-verbose"));
@@ -510,7 +511,7 @@ public final class CraftServer implements Server {
     private void overrideSpawnLimits() {
         for (SpawnCategory spawnCategory : SpawnCategory.values()) {
             if (CraftSpawnCategory.isValidForLimits(spawnCategory)) {
-                this.spawnCategoryLimit.put(spawnCategory, this.configuration.getInt(CraftSpawnCategory.getConfigNameSpawnLimit(spawnCategory)));
+                this.spawnCategoryLimit[spawnCategory.ordinal()] = this.configuration.getInt(CraftSpawnCategory.getConfigNameSpawnLimit(spawnCategory)); // CloudPlane - convert spawn category limits to array
             }
         }
     }
@@ -1097,9 +1098,9 @@ public final class CraftServer implements Server {
                 if (CraftSpawnCategory.isValidForLimits(spawnCategory)) {
                     long ticksPerCategorySpawn = this.getTicksPerSpawns(spawnCategory);
                     if (ticksPerCategorySpawn < 0) {
-                        world.ticksPerSpawnCategory.put(spawnCategory, CraftSpawnCategory.getDefaultTicksPerSpawn(spawnCategory));
+                        world.ticksPerSpawnCategory[spawnCategory.ordinal()] = CraftSpawnCategory.getDefaultTicksPerSpawn(spawnCategory); // CloudPlane - convert spawn category ticks to array
                     } else {
-                        world.ticksPerSpawnCategory.put(spawnCategory, ticksPerCategorySpawn);
+                        world.ticksPerSpawnCategory[spawnCategory.ordinal()] = ticksPerCategorySpawn; // CloudPlane - convert spawn category ticks to array
                     }
                 }
             }
@@ -2537,9 +2538,9 @@ public final class CraftServer implements Server {
         Preconditions.checkArgument(CraftSpawnCategory.isValidForLimits(spawnCategory), "SpawnCategory." + spawnCategory + " does not have a spawn limit.");
         return this.getSpawnLimitUnsafe(spawnCategory);
     }
-    public int getSpawnLimitUnsafe(final SpawnCategory spawnCategory) {
+    public final int getSpawnLimitUnsafe(final SpawnCategory spawnCategory) { // CloudPlane - public -> public-f; convert spawn category limits to array
         // Paper end - Add mobcaps commands
-        return this.spawnCategoryLimit.getOrDefault(spawnCategory, -1);
+        return this.spawnCategoryLimit[spawnCategory.ordinal()]; // CloudPlane - convert spawn category limits to array
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index a92e0877669a92851c6d7f83de75ffb087c8e651..ad7f56b6c55210773a3fd43a5a3b2b299f3ba0ae 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -160,7 +160,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     private final BiomeProvider biomeProvider;
     private final List<BlockPopulator> populators = new ArrayList<BlockPopulator>();
     private final BlockMetadataStore blockMetadata = new BlockMetadataStore(this);
-    private final Object2IntOpenHashMap<SpawnCategory> spawnCategoryLimit = new Object2IntOpenHashMap<>();
+    private final int[] spawnCategoryLimit = new int[SpawnCategory.values().length]; // CloudPlane - convert spawn category limits to array
     private final CraftPersistentDataContainer persistentDataContainer = new CraftPersistentDataContainer(CraftWorld.DATA_TYPE_REGISTRY);
     private net.kyori.adventure.pointer.Pointers adventure$pointers; // Paper - implement pointers
     // Paper start - void damage configuration
@@ -291,6 +291,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         this.biomeProvider = biomeProvider;
 
         this.environment = env;
+        java.util.Arrays.fill(this.spawnCategoryLimit, -1); // CloudPlane - convert spawn category limits to array
         // Paper start - per world spawn limits
         for (SpawnCategory spawnCategory : SpawnCategory.values()) {
             if (CraftSpawnCategory.isValidForLimits(spawnCategory)) {
@@ -1706,7 +1707,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         Preconditions.checkArgument(spawnCategory != null, "SpawnCategory cannot be null");
         Preconditions.checkArgument(CraftSpawnCategory.isValidForLimits(spawnCategory), "SpawnCategory.%s are not supported", spawnCategory);
 
-        this.world.ticksPerSpawnCategory.put(spawnCategory, (long) ticksPerCategorySpawn);
+        this.world.ticksPerSpawnCategory[spawnCategory.ordinal()] = ticksPerCategorySpawn; // CloudPlane - convert spawn category ticks to array
     }
 
     @Override
@@ -1714,7 +1715,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         Preconditions.checkArgument(spawnCategory != null, "SpawnCategory cannot be null");
         Preconditions.checkArgument(CraftSpawnCategory.isValidForLimits(spawnCategory), "SpawnCategory.%s are not supported", spawnCategory);
 
-        return this.world.ticksPerSpawnCategory.getLong(spawnCategory);
+        return this.world.ticksPerSpawnCategory[spawnCategory.ordinal()]; // CloudPlane - convert spawn category ticks to array
     }
 
     @Override
@@ -1818,7 +1819,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         return this.getSpawnLimitUnsafe(spawnCategory);
     }
     public final int getSpawnLimitUnsafe(final SpawnCategory spawnCategory) {
-        int limit = this.spawnCategoryLimit.getOrDefault(spawnCategory, -1);
+        int limit = this.spawnCategoryLimit[spawnCategory.ordinal()]; // CloudPlane - convert spawn category limits to array
         if (limit < 0) {
             limit = this.server.getSpawnLimitUnsafe(spawnCategory);
             // Paper end - Add mobcaps commands
@@ -1831,7 +1832,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         Preconditions.checkArgument(spawnCategory != null, "SpawnCategory cannot be null");
         Preconditions.checkArgument(CraftSpawnCategory.isValidForLimits(spawnCategory), "SpawnCategory.%s are not supported", spawnCategory);
 
-        this.spawnCategoryLimit.put(spawnCategory, limit);
+        this.spawnCategoryLimit[spawnCategory.ordinal()] = limit; // CloudPlane - convert spawn category limits to array
     }
 
     @Override
