From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: booky10 <boooky10@gmail.com>
Date: Fri, 20 Sep 2024 01:13:04 +0200
Subject: [PATCH] Further improve Player#canSee performance


diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index e908e58eebda88d66ece593ff05c1868d2806d29..eb3368619bfaacfe20f4e45d0b96c34fb99808be 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -379,6 +379,15 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     private boolean invulnerable;
     protected UUID uuid;
     protected String stringUUID;
+    // CloudPlane start - further improve Player#canSee performance;
+    // combine UUID to single value to allow for easier hashmap lookups
+    // and allow using fastutil number sets
+    // this is less "secure" than using a full UUID, but should still not cause
+    // any collisions on this non-distributed system
+    // there may be a slight chance for collision, but this chance
+    // is way too small to actually account for
+    public long longUUID;
+    // CloudPlane end - further improve Player#canSee performance
     private boolean hasGlowingTag;
     private final Set<String> tags;
     private final double[] pistonDeltas;
@@ -568,8 +577,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
         this.firstTick = true;
         this.levelCallback = EntityInLevelCallback.NULL;
         this.packetPositionCodec = new VecDeltaCodec();
-        this.uuid = Mth.createInsecureUUID(this.random);
-        this.stringUUID = this.uuid.toString();
+        this.setUUID(Mth.createInsecureUUID(this.random)); // CloudPlane - further improve Player#canSee performance; call common setter
         this.tags = Sets.newHashSet();
         this.pistonDeltas = new double[]{0.0D, 0.0D, 0.0D};
         this.mainSupportingBlockPos = Optional.empty();
@@ -2605,8 +2613,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
             this.invulnerable = nbt.getBoolean("Invulnerable");
             this.portalCooldown = nbt.getInt("PortalCooldown");
             if (nbt.hasUUID("UUID")) {
-                this.uuid = nbt.getUUID("UUID");
-                this.stringUUID = this.uuid.toString();
+                this.setUUID(nbt.getUUID("UUID")); // CloudPlane - further improve Player#canSee performance; call common setter
             }
 
             if (Double.isFinite(this.getX()) && Double.isFinite(this.getY()) && Double.isFinite(this.getZ())) {
@@ -3933,6 +3940,9 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     public void setUUID(UUID uuid) {
         this.uuid = uuid;
         this.stringUUID = this.uuid.toString();
+        // CloudPlane start - further improve Player#canSee performance
+        this.longUUID = this.uuid.getMostSignificantBits() ^ this.uuid.getLeastSignificantBits();
+        // CloudPlane end - further improve Player#canSee performance
     }
 
     @Override
@@ -3944,6 +3954,12 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
         return this.stringUUID;
     }
 
+    // CloudPlane start - further improve Player#canSee performance
+    public final long getLongUUID() {
+        return this.longUUID;
+    }
+    // CloudPlane end - further improve Player#canSee performance
+
     @Override
     public String getScoreboardName() {
         return this.stringUUID;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 06d243bb0fb3a645acee43953b6c8829b9b992bf..581ddf14105b82fd13039f2d770b097ebc56d4c2 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -200,6 +200,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     private boolean hasPlayedBefore = false;
     private final ConversationTracker conversationTracker = new ConversationTracker();
     private final Set<String> channels = new HashSet<String>();
+    private final it.unimi.dsi.fastutil.longs.LongSet invertedVisibilityEntitySet = new it.unimi.dsi.fastutil.longs.LongOpenHashSet(); // CloudPlane - further improve Player#canSee performance
     private final Map<UUID, Set<WeakReference<Plugin>>> invertedVisibilityEntities = new HashMap<>();
     private final Set<UUID> unlistedEntities = new HashSet<>(); // Paper - Add Listing API for Player
     private static final WeakHashMap<Plugin, WeakReference<Plugin>> pluginWeakReferences = new WeakHashMap<>();
@@ -2044,6 +2045,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         invertedPlugins = new HashSet<>();
         invertedPlugins.add(CraftPlayer.getPluginWeakReference(plugin));
         this.invertedVisibilityEntities.put(entity.getUniqueId(), invertedPlugins);
+        this.invertedVisibilityEntitySet.add(((CraftEntity) entity).getHandle().getLongUUID()); // CloudPlane - further improve Player#canSee performance
 
         return true;
     }
@@ -2082,6 +2084,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         if (this.invertedVisibilityEntities.remove(entity.getUniqueId()) == null) {
             this.untrackAndHideEntity(entity);
         }
+        else this.invertedVisibilityEntitySet.remove(((CraftEntity) entity).getHandle().getLongUUID()); // CloudPlane - further improve Player#canSee performance
     }
 
     @Override
@@ -2130,6 +2133,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             return false; // Some other plugins still want the entity inverted
         }
         this.invertedVisibilityEntities.remove(entity.getUniqueId());
+        this.invertedVisibilityEntitySet.remove(((CraftEntity) entity).getHandle().getLongUUID()); // CloudPlane - further improve Player#canSee performance
 
         return true;
     }
@@ -2206,6 +2210,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         if (this.invertedVisibilityEntities.remove(entity.getUniqueId()) == null) {
             this.trackAndShowEntity(entity);
         }
+        else this.invertedVisibilityEntitySet.remove(((CraftEntity) entity).getHandle().getLongUUID()); // CloudPlane - further improve Player#canSee performance
     }
     // Paper start
     public com.destroystokyo.paper.profile.PlayerProfile getPlayerProfile() {
@@ -2238,6 +2243,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     public void onEntityRemove(Entity entity) {
         this.invertedVisibilityEntities.remove(entity.getUUID());
+        this.invertedVisibilityEntitySet.remove(entity.getLongUUID()); // CloudPlane - further improve Player#canSee performance
     }
 
     @Override
@@ -2253,7 +2259,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     public boolean canSee(Entity entity) {
         return this.entity == entity // SPIGOT-7312: Can always see self
-                || entity.visibleByDefault != this.invertedVisibilityEntities.containsKey(entity.getUUID());
+                || entity.visibleByDefault != this.invertedVisibilityEntitySet.contains(entity.longUUID); // CloudPlane - further improve Player#canSee performance
         // CloudPlane end - improve Player#canSee performance
     }
 
