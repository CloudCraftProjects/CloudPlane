From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kevin Raneri <kevin.raneri@gmail.com>
Date: Tue, 9 Nov 2021 23:36:56 -0500
Subject: [PATCH] Pufferfish Minecraft Patches


diff --git a/io/papermc/paper/entity/activation/ActivationRange.java b/io/papermc/paper/entity/activation/ActivationRange.java
index 2ebee223085fe7926c7f3e555df19ae69f36157e..0bf06dd18bb4b0575c46562745ec846ac1e9ad51 100644
--- a/io/papermc/paper/entity/activation/ActivationRange.java
+++ b/io/papermc/paper/entity/activation/ActivationRange.java
@@ -159,6 +159,24 @@ public final class ActivationRange {
                 }
 
                 ActivationRange.activateEntity(entity);
+
+                // Pufferfish start - DAB
+                if (gg.pufferfish.pufferfish.PufferfishConfig.dearEnabled && entity.getType().dabEnabled) {
+                    if (!entity.activatedPriorityReset) {
+                        entity.activatedPriorityReset = true;
+                        entity.activatedPriority = gg.pufferfish.pufferfish.PufferfishConfig.maximumActivationPrio;
+                    }
+                    net.minecraft.world.phys.Vec3 playerVec = player.position();
+                    net.minecraft.world.phys.Vec3 entityVec = entity.position();
+                    double diffX = playerVec.x - entityVec.x, diffY = playerVec.y - entityVec.y, diffZ = playerVec.z - entityVec.z;
+                    int squaredDistance = (int) (diffX * diffX + diffY * diffY + diffZ * diffZ);
+                    entity.activatedPriority = squaredDistance > gg.pufferfish.pufferfish.PufferfishConfig.startDistanceSquared ?
+                            Math.max(1, Math.min(squaredDistance >> gg.pufferfish.pufferfish.PufferfishConfig.activationDistanceMod, entity.activatedPriority)) :
+                            1;
+                } else {
+                    entity.activatedPriority = 1;
+                }
+                // Pufferfish end - DAB
             }
         }
     }
@@ -171,11 +189,11 @@ public final class ActivationRange {
     private static void activateEntity(final Entity entity) {
         if (MinecraftServer.currentTick > entity.activatedTick) {
             if (entity.defaultActivationState) {
-                entity.activatedTick = MinecraftServer.currentTick;
+                entity.activatedTick = MinecraftServer.currentTick; // Pufferfish - diff on change
                 return;
             }
             if (entity.activationType.boundingBox.intersects(entity.getBoundingBox())) {
-                entity.activatedTick = MinecraftServer.currentTick;
+                entity.activatedTick = MinecraftServer.currentTick; // Pufferfish - diff on change
             }
         }
     }
@@ -215,7 +233,7 @@ public final class ActivationRange {
         }
         // special cases.
         if (entity instanceof final LivingEntity living) {
-            if (living.onClimbable() || living.jumping || living.hurtTime > 0 || !living.activeEffects.isEmpty() || living.isFreezing()) {
+            if (living.onClimableCached() || living.jumping || living.hurtTime > 0 || !living.activeEffects.isEmpty() || living.isFreezing()) { // Pufferfish - use cached
                 return 1;
             }
             if (entity instanceof final Mob mob && mob.getTarget() != null) {
diff --git a/net/minecraft/network/chat/SignedMessageChain.java b/net/minecraft/network/chat/SignedMessageChain.java
index f6eed34b2fd72ab74cc9dc4b99ca184d512c0a66..9cec107eae394eef14fab1177bdccb14b767b9a8 100644
--- a/net/minecraft/network/chat/SignedMessageChain.java
+++ b/net/minecraft/network/chat/SignedMessageChain.java
@@ -45,7 +45,7 @@ public class SignedMessageChain {
                     SignedMessageLink signedMessageLink = SignedMessageChain.this.nextLink;
                     if (signedMessageLink == null) {
                         throw new SignedMessageChain.DecodeException(SignedMessageChain.DecodeException.CHAIN_BROKEN);
-                    } else if (body.timeStamp().isBefore(SignedMessageChain.this.lastTimeStamp)) {
+                    } else if (!gg.pufferfish.pufferfish.PufferfishConfig.disableOutOfOrderChat && body.timeStamp().isBefore(SignedMessageChain.this.lastTimeStamp)) { // Pufferfish
                         this.setChainBroken();
                         throw new SignedMessageChain.DecodeException(SignedMessageChain.DecodeException.OUT_OF_ORDER_CHAT, org.bukkit.event.player.PlayerKickEvent.Cause.OUT_OF_ORDER_CHAT); // Paper - kick event causes
                     } else {
diff --git a/net/minecraft/server/MinecraftServer.java b/net/minecraft/server/MinecraftServer.java
index f1373fd5fdebb9f4600ba7f32a5df6188de3a0e9..72dd5ef786a1edf1602c6a067e1bd8844082409d 100644
--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -389,6 +389,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     }
     // Paper end - rewrite chunk system
 
+    public gg.pufferfish.pufferfish.util.AsyncExecutor mobSpawnExecutor = new gg.pufferfish.pufferfish.util.AsyncExecutor("MobSpawning"); // Pufferfish - optimize mob spawning
+
     public MinecraftServer(
         // CraftBukkit start
         joptsimple.OptionSet options,
diff --git a/net/minecraft/server/dedicated/DedicatedServer.java b/net/minecraft/server/dedicated/DedicatedServer.java
index 31e02f50edd46220dac81500dbb273f1ccdbe0b9..e28ba8b443f70b346a7748dc20a7e147a00bdcdb 100644
--- a/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/net/minecraft/server/dedicated/DedicatedServer.java
@@ -184,6 +184,8 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         this.server.spark.registerCommandBeforePlugins(this.server); // Paper - spark
         com.destroystokyo.paper.Metrics.PaperMetrics.startMetrics(); // Paper - start metrics
         com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // Paper - load version history now
+        gg.pufferfish.pufferfish.PufferfishConfig.load(); // Pufferfish
+        gg.pufferfish.pufferfish.PufferfishCommand.init(); // Pufferfish
 
         this.setPvpAllowed(properties.pvp);
         this.setFlightAllowed(properties.allowFlight);
@@ -308,6 +310,11 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
                 LOGGER.info("JMX monitoring enabled");
             }
 
+            // Pufferfish start - async mob spawning
+            if (gg.pufferfish.pufferfish.PufferfishConfig.enableAsyncMobSpawning) {
+                this.mobSpawnExecutor.start();
+            }
+            // Pufferfish end
             return true;
         }
     }
diff --git a/net/minecraft/server/level/DistanceManager.java b/net/minecraft/server/level/DistanceManager.java
index fd3d0f6cb53bc8b6186f0d86575f21007b2c20ed..306c7db807f82a7c80e2ecdb40be3a3f6d3a0264 100644
--- a/net/minecraft/server/level/DistanceManager.java
+++ b/net/minecraft/server/level/DistanceManager.java
@@ -58,20 +58,25 @@ public abstract class DistanceManager implements ca.spottedleaf.moonrise.patches
 
     @Override
     public final void moonrise$addPlayer(final ServerPlayer player, final SectionPos pos) {
+        synchronized (this.spawnChunkTracker) { // Pufferfish - async mob spawning
         this.spawnChunkTracker.add(player, pos.x(), pos.z(), ca.spottedleaf.moonrise.patches.chunk_tick_iteration.ChunkTickConstants.PLAYER_SPAWN_TRACK_RANGE);
         // Note: Cannot do narrow tracking on Paper due to custom spawn range
+        } // Pufferfish - async mob spawning
     }
 
     @Override
     public final void moonrise$removePlayer(final ServerPlayer player, final SectionPos pos) {
+        synchronized (this.spawnChunkTracker) { // Pufferfish - async mob spawning
         this.spawnChunkTracker.remove(player);
         // Note: Cannot do narrow tracking on Paper due to custom spawn range
+        } // Pufferfish - async mob spawning
     }
 
     @Override
     public final void moonrise$updatePlayer(final ServerPlayer player,
                                             final SectionPos oldPos, final SectionPos newPos,
                                             final boolean oldIgnore, final boolean newIgnore) {
+        synchronized (this.spawnChunkTracker) { // Pufferfish - async mob spawning
         if (newIgnore) {
             this.spawnChunkTracker.remove(player);
             // Note: Cannot do narrow tracking on Paper due to custom spawn range
@@ -79,6 +84,7 @@ public abstract class DistanceManager implements ca.spottedleaf.moonrise.patches
             this.spawnChunkTracker.addOrUpdate(player, newPos.x(), newPos.z(), ca.spottedleaf.moonrise.patches.chunk_tick_iteration.ChunkTickConstants.PLAYER_SPAWN_TRACK_RANGE);
             // Note: Cannot do narrow tracking on Paper due to custom spawn range
         }
+        } // Pufferfish - async mob spawning
     }
 
     @Override
@@ -160,12 +166,15 @@ public abstract class DistanceManager implements ca.spottedleaf.moonrise.patches
     }
 
     public int getNaturalSpawnChunkCount() {
+        // Pufferfish - async mob spawning; note: this doesn't need locking, it's never called off-thread
         return this.spawnChunkTracker.getTotalPositions(); // Paper - chunk tick iteration optimisation
     }
 
     public TriState hasPlayersNearby(long chunkPos) {
+        synchronized (this.spawnChunkTracker) { // Pufferfish - async mob spawning
         // Note: Cannot do narrow tracking on Paper due to custom spawn range // Paper - chunk tick iteration optimisation
         return this.spawnChunkTracker.hasObjectsNear(ca.spottedleaf.moonrise.common.util.CoordinateUtils.getChunkX(chunkPos), ca.spottedleaf.moonrise.common.util.CoordinateUtils.getChunkZ(chunkPos)) ? net.minecraft.util.TriState.DEFAULT : net.minecraft.util.TriState.FALSE; // Paper - chunk tick iteration optimisation
+        }
     }
 
     public void forEachEntityTickingChunk(LongConsumer action) {
diff --git a/net/minecraft/server/level/ServerChunkCache.java b/net/minecraft/server/level/ServerChunkCache.java
index 59e8a5e1b35c81883c9b1ca00c6e55d77584d8cc..ac4c4c31cd56fd51e25084f0fb854f1077d1bca7 100644
--- a/net/minecraft/server/level/ServerChunkCache.java
+++ b/net/minecraft/server/level/ServerChunkCache.java
@@ -184,6 +184,8 @@ public class ServerChunkCache extends ChunkSource implements ca.spottedleaf.moon
     }
     // Paper end - chunk tick iteration optimisations
 
+    public boolean firstRunSpawnCounts = true; // Pufferfish - async mob spawning
+    public final java.util.concurrent.atomic.AtomicBoolean spawnCountsReady = new java.util.concurrent.atomic.AtomicBoolean(false); // Pufferfish - async mob spawning
 
     public ServerChunkCache(
         ServerLevel level,
@@ -544,6 +546,7 @@ public class ServerChunkCache extends ChunkSource implements ca.spottedleaf.moon
         // Paper start - Optional per player mob spawns
         NaturalSpawner.SpawnState spawnState;
         if ((this.spawnFriendlies || this.spawnEnemies) && this.level.paperConfig().entities.spawning.perPlayerMobSpawns) { // don't count mobs when animals and monsters are disabled
+            if (!gg.pufferfish.pufferfish.PufferfishConfig.enableAsyncMobSpawning) { // Pufferfish - async mob spawning
             // re-set mob counts
             for (ServerPlayer player : this.level.players) {
                 // Paper start - per player mob spawning backoff
@@ -558,17 +561,23 @@ public class ServerChunkCache extends ChunkSource implements ca.spottedleaf.moon
                 }
                 // Paper end - per player mob spawning backoff
             }
-            spawnState = NaturalSpawner.createState(naturalSpawnChunkCount, this.level.getAllEntities(), this::getFullChunk, null, true);
+            // Pufferfish start - async mob spawning
+            this.lastSpawnState = NaturalSpawner.createState(naturalSpawnChunkCount, this.level.getAllEntities(), this::getFullChunk, null, true);
+            this.spawnCountsReady.set(true);
+            }
         } else {
-            spawnState = NaturalSpawner.createState(naturalSpawnChunkCount, this.level.getAllEntities(), this::getFullChunk, !this.level.paperConfig().entities.spawning.perPlayerMobSpawns ? new LocalMobCapCalculator(this.chunkMap) : null, false);
+            this.lastSpawnState = NaturalSpawner.createState(naturalSpawnChunkCount, this.level.getAllEntities(), this::getFullChunk, !this.level.paperConfig().entities.spawning.perPlayerMobSpawns ? new LocalMobCapCalculator(this.chunkMap) : null, false); this.spawnCountsReady.set(true);
+            this.spawnCountsReady.set(true);
+            // Pufferfish end - async mob spawning
         }
         // Paper end - Optional per player mob spawns
-        this.lastSpawnState = spawnState;
+        spawnState = this.lastSpawnState; // Pufferfish - async mob spawning
         profiler.popPush("spawnAndTick");
+        this.level.resetIceAndSnowTick(); // Pufferfish - reset ice & snow tick random
         boolean _boolean = this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING) && !this.level.players().isEmpty(); // CraftBukkit
         int _int = this.level.getGameRules().getInt(GameRules.RULE_RANDOMTICKING);
         List<MobCategory> filteredSpawningCategories;
-        if (_boolean && (this.spawnEnemies || this.spawnFriendlies)) {
+        if (_boolean && (this.spawnEnemies || this.spawnFriendlies) && (!gg.pufferfish.pufferfish.PufferfishConfig.enableAsyncMobSpawning || this.spawnCountsReady.get())) { // Pufferfish - async mob spawning
             // Paper start - PlayerNaturallySpawnCreaturesEvent
             for (ServerPlayer entityPlayer : this.level.players()) {
                 int chunkRange = Math.min(level.spigotConfig.mobSpawnRange, entityPlayer.getBukkitEntity().getViewDistance());
@@ -609,6 +618,43 @@ public class ServerChunkCache extends ChunkSource implements ca.spottedleaf.moon
         if (_boolean) {
             this.level.tickCustomSpawners(this.spawnEnemies, this.spawnFriendlies);
         }
+
+        // Pufferfish start - async mob spawning
+        if (gg.pufferfish.pufferfish.PufferfishConfig.enableAsyncMobSpawning
+                && ((this.spawnFriendlies || this.spawnEnemies) && this.level.paperConfig().entities.spawning.perPlayerMobSpawns)) {
+            // re-set mob counts
+            for (ServerPlayer player : this.level.players) {
+                // Paper start - per player mob spawning backoff
+                for (int ii = 0; ii < ServerPlayer.MOBCATEGORY_TOTAL_ENUMS; ii++) {
+                    player.mobCounts[ii] = 0;
+
+                    int newBackoff = player.mobBackoffCounts[ii] - 1; // TODO make configurable bleed // TODO use nonlinear algorithm?
+                    if (newBackoff < 0) {
+                        newBackoff = 0;
+                    }
+                    player.mobBackoffCounts[ii] = newBackoff;
+                }
+                // Paper end - per player mob spawning backoff
+            }
+            if (this.firstRunSpawnCounts) {
+                this.firstRunSpawnCounts = false;
+                this.spawnCountsReady.set(true);
+            }
+            if (this.spawnCountsReady.getAndSet(false)) {
+                int spawningChunkCount = this.distanceManager.getNaturalSpawnChunkCount();
+                this.level.getServer().mobSpawnExecutor.submit(() -> {
+                    ca.spottedleaf.moonrise.common.list.IteratorSafeOrderedReferenceSet.Iterator<Entity> objectiterator =
+                            this.level.entityTickList.entities.iterator(ca.spottedleaf.moonrise.common.list.IteratorSafeOrderedReferenceSet.ITERATOR_FLAG_SEE_ADDITIONS);
+                    try {
+                        this.lastSpawnState = NaturalSpawner.createState(spawningChunkCount, () -> objectiterator, this::getFullChunk, null, true);
+                    } finally {
+                        objectiterator.finishedIterating();
+                    }
+                    this.spawnCountsReady.set(true);
+                });
+            }
+        }
+        // Pufferfish end - async mob spawning
     }
 
     private void tickSpawningChunk(LevelChunk chunk, long timeInhabited, List<MobCategory> spawnCategories, NaturalSpawner.SpawnState spawnState) {
@@ -619,7 +665,9 @@ public class ServerChunkCache extends ChunkSource implements ca.spottedleaf.moon
         }
 
         if (!spawnCategories.isEmpty()) {
+            if (!gg.pufferfish.pufferfish.PufferfishConfig.enableAsyncMobSpawning || this.spawnCountsReady.get()) // Pufferfish - async mob spawning
             if (this.level.getWorldBorder().isWithinBounds(pos)) { // Paper - rewrite chunk system
+                if (this.chunkMap.anyPlayerCloseEnoughForSpawning(pos, true)) // Pufferfish - re-add condition from Spigot
                 NaturalSpawner.spawnForChunk(this.level, chunk, spawnState, spawnCategories);
             }
         }
diff --git a/net/minecraft/server/level/ServerLevel.java b/net/minecraft/server/level/ServerLevel.java
index bfbfbaa9660d21071c420b60b10be0a02a1bc87e..847af947c44d0abb48323fe1b4f8b5860e7a2195 100644
--- a/net/minecraft/server/level/ServerLevel.java
+++ b/net/minecraft/server/level/ServerLevel.java
@@ -788,6 +788,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
             this.entityTickList
                 .forEach(
                     entity -> {
+                        entity.activatedPriorityReset = false; // Pufferfish - DAB
                         if (!entity.isRemoved()) {
                             if (!tickRateManager.isEntityFrozen(entity)) {
                                 profilerFiller.push("checkDespawn");
@@ -804,7 +805,19 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
                                     }
 
                                     profilerFiller.push("tick");
-                                    this.guardEntityTick(this::tickNonPassenger, entity);
+                                    // Pufferfish start - copied from #guardEntityTick
+                                    try {
+                                        this.tickNonPassenger(entity);
+                                    } catch (Throwable var6) {
+                                        // Paper start - Prevent block entity and entity crashes
+                                        final String msg = String.format("Entity threw exception at %s:%s,%s,%s", entity.level().getWorld().getName(), entity.getX(), entity.getY(), entity.getZ());
+                                        MinecraftServer.LOGGER.error(msg, var6);
+                                        getCraftServer().getPluginManager().callEvent(new com.destroystokyo.paper.event.server.ServerExceptionEvent(new com.destroystokyo.paper.exception.ServerInternalException(msg, var6))); // Paper - ServerExceptionEvent
+                                        entity.discard(org.bukkit.event.entity.EntityRemoveEvent.Cause.DISCARD);
+                                        // Paper end - Prevent block entity and entity crashes
+                                    }
+                                    this.moonrise$midTickTasks(); // Paper - rewrite chunk system
+                                    // Pufferfish end - copied from #guardEntityTick
                                     profilerFiller.pop();
                                 }
                             }
@@ -857,7 +870,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
     }
 
     // Paper start - optimise random ticking
-    private final ca.spottedleaf.moonrise.common.util.SimpleThreadUnsafeRandom simpleRandom = new ca.spottedleaf.moonrise.common.util.SimpleThreadUnsafeRandom(net.minecraft.world.level.levelgen.RandomSupport.generateUniqueSeed());
+    public final ca.spottedleaf.moonrise.common.util.SimpleThreadUnsafeRandom simpleRandom = new ca.spottedleaf.moonrise.common.util.SimpleThreadUnsafeRandom(net.minecraft.world.level.levelgen.RandomSupport.generateUniqueSeed()); // Pufferfish - private-f -> public-f
 
     private void optimiseRandomTick(final LevelChunk chunk, final int tickSpeed) {
         final LevelChunkSection[] sections = chunk.getSections();
@@ -908,6 +921,14 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
     }
     // Paper end - optimise random ticking
 
+    // Pufferfish start
+    private int currentIceAndSnowTick = 0;
+
+    protected void resetIceAndSnowTick() {
+        this.currentIceAndSnowTick = this.random.nextInt(16);
+    }
+    // Pufferfish end
+
     public void tickChunk(LevelChunk chunk, int randomTickSpeed) {
         final ca.spottedleaf.moonrise.common.util.SimpleThreadUnsafeRandom simpleRandom = this.simpleRandom; // Paper - optimise random ticking
         ChunkPos pos = chunk.getPos();
@@ -918,7 +939,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
 
         if (!this.paperConfig().environment.disableIceAndSnow) { // Paper - Option to disable ice and snow
         for (int i = 0; i < randomTickSpeed; i++) {
-            if (simpleRandom.nextInt(48) == 0) {  // Paper - optimise random ticking
+            if ((this.currentIceAndSnowTick++ & 47) == 0) {  // Paper - optimise random ticking // Pufferfish - optimize further random ticking
                 this.tickPrecipitation(this.getBlockRandomPos(minBlockX, 0, minBlockZ, 15));
             }
         }
@@ -939,7 +960,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
         int minBlockZ = pos.getMinBlockZ();
         ProfilerFiller profilerFiller = Profiler.get();
         profilerFiller.push("thunder");
-        if (!this.paperConfig().environment.disableThunder && isRaining && this.isThundering() && this.spigotConfig.thunderChance > 0 && this.random.nextInt(this.spigotConfig.thunderChance) == 0) { // Spigot // Paper - Option to disable thunder
+        if (!this.paperConfig().environment.disableThunder && isRaining && this.isThundering() && this.spigotConfig.thunderChance > 0 && chunk.shouldDoLightning(this.simpleRandom)) { // Spigot // Paper - Option to disable thunder // Pufferfish - replace random with shouldDoLightning
             BlockPos blockPos = this.findLightningTargetAround(this.getBlockRandomPos(minBlockX, 0, minBlockZ, 15));
             if (this.isRainingAt(blockPos)) {
                 DifficultyInstance currentDifficultyAt = this.getCurrentDifficultyAt(blockPos);
diff --git a/net/minecraft/server/level/ServerPlayer.java b/net/minecraft/server/level/ServerPlayer.java
index 3781d9cc174b7aecacb9b9855d52c7b1ff05835c..b73c2e4d419ed75f4b8188786330ceb99df40b09 100644
--- a/net/minecraft/server/level/ServerPlayer.java
+++ b/net/minecraft/server/level/ServerPlayer.java
@@ -1360,6 +1360,7 @@ public class ServerPlayer extends Player implements ca.spottedleaf.moonrise.patc
                 this.connection.internalTeleport(PositionMoveRotation.of(teleportTransition), teleportTransition.relatives());
                 // CraftBukkit end
                 this.connection.resetPosition();
+                this.mainSupportingBlockPos = Optional.empty(); // Pufferfish - Fix paper 9372
                 teleportTransition.postTeleportTransition().onTransition(this);
                 return this;
             } else {
@@ -1398,6 +1399,7 @@ public class ServerPlayer extends Player implements ca.spottedleaf.moonrise.patc
                 this.setServerLevel(level);
                 this.connection.internalTeleport(PositionMoveRotation.of(teleportTransition), teleportTransition.relatives()); // CraftBukkit - use internal teleport without event
                 this.connection.resetPosition();
+                this.mainSupportingBlockPos = Optional.empty(); // Pufferfish - Fix paper 9372
                 level.addDuringTeleport(this);
                 profilerFiller.pop();
                 this.triggerDimensionChangeTriggers(serverLevel);
@@ -2081,6 +2083,7 @@ public class ServerPlayer extends Player implements ca.spottedleaf.moonrise.patc
     public void snapTo(double x, double y, double z) {
         super.snapTo(x, y, z);
         this.connection.resetPosition();
+        this.mainSupportingBlockPos = Optional.empty(); // Pufferfish - Fix paper 9372
     }
 
     @Override
@@ -2351,6 +2354,7 @@ public class ServerPlayer extends Player implements ca.spottedleaf.moonrise.patc
 
             this.connection.send(new ClientboundSetCameraPacket(this.camera));
             this.connection.resetPosition();
+            this.mainSupportingBlockPos = Optional.empty(); // Pufferfish - Fix paper 9372
         }
     }
 
@@ -2872,6 +2876,7 @@ public class ServerPlayer extends Player implements ca.spottedleaf.moonrise.patc
     public void forceSetPositionRotation(double x, double y, double z, float yaw, float pitch) {
         this.snapTo(x, y, z, yaw, pitch);
         this.connection.resetPosition();
+        this.mainSupportingBlockPos = Optional.empty(); // Pufferfish - Fix paper 9372
     }
 
     @Override
diff --git a/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 9041830c19e2899479e1519488faba5c416ccd88..8da02aaecd0583bbd0dabc77d8c14554b77b1d67 100644
--- a/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -1225,6 +1225,13 @@ public class ServerGamePacketListenerImpl
 
     @Override
     public void handleEditBook(ServerboundEditBookPacket packet) {
+        // Pufferfish start - disable books
+        if (!gg.pufferfish.pufferfish.PufferfishConfig.enableBooks
+                && !this.player.getBukkitEntity().hasPermission("pufferfish.usebooks")) {
+            return;
+        }
+        // Pufferfish end - disable books
+
         // Paper start - Book size limits
         final io.papermc.paper.configuration.type.number.IntOr.Disabled pageMax = io.papermc.paper.configuration.GlobalConfiguration.get().itemValidation.bookSize.pageMax;
         if (!this.cserver.isPrimaryThread() && pageMax.enabled()) {
diff --git a/net/minecraft/util/profiling/Profiler.java b/net/minecraft/util/profiling/Profiler.java
index cbd57d68e169ed044f325a776075da78b473b6f3..46ad80b17ac380290fa889021ee68ae7466e548a 100644
--- a/net/minecraft/util/profiling/Profiler.java
+++ b/net/minecraft/util/profiling/Profiler.java
@@ -44,6 +44,7 @@ public final class Profiler {
     }
 
     public static ProfilerFiller get() {
+        if (gg.pufferfish.pufferfish.PufferfishConfig.disableMethodProfiler) return net.minecraft.util.profiling.InactiveProfiler.INSTANCE;
         return ACTIVE_COUNT.get() == 0 ? getDefaultFiller() : Objects.requireNonNullElseGet(ACTIVE.get(), Profiler::getDefaultFiller);
     }
 
diff --git a/net/minecraft/world/CompoundContainer.java b/net/minecraft/world/CompoundContainer.java
index 0e9beb7f74e527a95bff064631e6d591f5775ce5..f3a19d46d27e2843adc2996ec8b42336decdeb83 100644
--- a/net/minecraft/world/CompoundContainer.java
+++ b/net/minecraft/world/CompoundContainer.java
@@ -59,6 +59,23 @@ public class CompoundContainer implements Container {
         this.container2 = container2;
     }
 
+    // Pufferfish start
+    @Override
+    public boolean hasEmptySlot(net.minecraft.core.Direction enumdirection) {
+        return this.container1.hasEmptySlot(null) || this.container2.hasEmptySlot(null);
+    }
+
+    @Override
+    public boolean isCompletelyFull(net.minecraft.core.Direction enumdirection) {
+        return this.container1.isCompletelyFull(null) && this.container2.isCompletelyFull(null);
+    }
+
+    @Override
+    public boolean isCompletelyEmpty(net.minecraft.core.Direction enumdirection) {
+        return this.container1.isCompletelyEmpty(null) && this.container2.isCompletelyEmpty(null);
+    }
+    // Pufferfish end
+
     @Override
     public int getContainerSize() {
         return this.container1.getContainerSize() + this.container2.getContainerSize();
diff --git a/net/minecraft/world/Container.java b/net/minecraft/world/Container.java
index b382665cc125b8b5c0938e5e55984e4bf91d37ff..9b8a1f1e6f833847f43c17c5e9c019b9bc3089b5 100644
--- a/net/minecraft/world/Container.java
+++ b/net/minecraft/world/Container.java
@@ -14,6 +14,64 @@ import net.minecraft.world.level.block.entity.BlockEntity;
 public interface Container extends Clearable, Iterable<ItemStack> {
     float DEFAULT_DISTANCE_BUFFER = 4.0F;
 
+    // Pufferfish start - allow the inventory to override and optimize these frequent calls
+    default boolean hasEmptySlot(@org.jetbrains.annotations.Nullable net.minecraft.core.Direction enumdirection) { // there is a slot with 0 items in it
+        if (this instanceof WorldlyContainer worldlyContainer) {
+            for (int i : worldlyContainer.getSlotsForFace(enumdirection)) {
+                if (this.getItem(i).isEmpty()) {
+                    return true;
+                }
+            }
+        } else {
+            int size = this.getContainerSize();
+            for (int i = 0; i < size; i++) {
+                if (this.getItem(i).isEmpty()) {
+                    return true;
+                }
+            }
+        }
+        return false;
+    }
+
+    default boolean isCompletelyFull(@org.jetbrains.annotations.Nullable net.minecraft.core.Direction enumdirection) { // every stack is maxed
+        if (this instanceof WorldlyContainer worldlyContainer) {
+            for (int i : worldlyContainer.getSlotsForFace(enumdirection)) {
+                ItemStack itemStack = this.getItem(i);
+                if (itemStack.getCount() < itemStack.getMaxStackSize()) {
+                    return false;
+                }
+            }
+        } else {
+            int size = this.getContainerSize();
+            for (int i = 0; i < size; i++) {
+                ItemStack itemStack = this.getItem(i);
+                if (itemStack.getCount() < itemStack.getMaxStackSize()) {
+                    return false;
+                }
+            }
+        }
+        return true;
+    }
+
+    default boolean isCompletelyEmpty(@org.jetbrains.annotations.Nullable net.minecraft.core.Direction enumdirection) {
+        if (this instanceof WorldlyContainer worldlyContainer) {
+            for (int i : worldlyContainer.getSlotsForFace(enumdirection)) {
+                if (!this.getItem(i).isEmpty()) {
+                    return false;
+                }
+            }
+        } else {
+            int size = this.getContainerSize();
+            for (int i = 0; i < size; i++) {
+                if (!this.getItem(i).isEmpty()) {
+                    return false;
+                }
+            }
+        }
+        return true;
+    }
+    // Pufferfish end
+
     int getContainerSize();
 
     boolean isEmpty();
diff --git a/net/minecraft/world/entity/Entity.java b/net/minecraft/world/entity/Entity.java
index 6fd0ceca1219ab52f84e3cf3bd63253d5027c723..78a169a0106583b63bdfba2436b230ef4aac55b3 100644
--- a/net/minecraft/world/entity/Entity.java
+++ b/net/minecraft/world/entity/Entity.java
@@ -234,7 +234,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     public double yo;
     public double zo;
     private Vec3 position;
-    private BlockPos blockPosition;
+    public BlockPos blockPosition; // Pufferfish - private -> public
     private ChunkPos chunkPosition;
     private Vec3 deltaMovement = Vec3.ZERO;
     private float yRot;
@@ -512,6 +512,9 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     }
     // Paper end - optimise entity tracker
 
+    public boolean activatedPriorityReset = false; // Pufferfish - DAB
+    public int activatedPriority = gg.pufferfish.pufferfish.PufferfishConfig.maximumActivationPrio; // Pufferfish - DAB: golf score
+
     public Entity(EntityType<?> entityType, Level level) {
         this.type = entityType;
         this.level = level;
@@ -4470,7 +4473,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
 
     // Paper start - optimise collisions
     public boolean updateFluidHeightAndDoFluidPushing(final TagKey<Fluid> fluid, final double flowScale) {
-        if (this.touchingUnloadedChunk()) {
+        if (false && this.touchingUnloadedChunk()) { // Pufferfish - lookup happens below anyway
             return false;
         }
 
@@ -4509,7 +4512,13 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
 
         for (int currChunkZ = minChunkZ; currChunkZ <= maxChunkZ; ++currChunkZ) {
             for (int currChunkX = minChunkX; currChunkX <= maxChunkX; ++currChunkX) {
-                final net.minecraft.world.level.chunk.LevelChunkSection[] sections = chunkSource.getChunk(currChunkX, currChunkZ, net.minecraft.world.level.chunk.status.ChunkStatus.FULL, false).getSections();
+                // Pufferfish start - move down unloaded chunk check
+                final net.minecraft.world.level.chunk.ChunkAccess chunk = chunkSource.getChunk(currChunkX, currChunkZ, net.minecraft.world.level.chunk.status.ChunkStatus.FULL, false);
+                if (chunk == null) {
+                    return false; // touching unloaded chunk
+                }
+                final net.minecraft.world.level.chunk.LevelChunkSection[] sections = chunk.getSections();
+                // Pufferfish end - move down unloaded chunk check
 
                 // bound y
                 for (int currChunkY = minChunkY; currChunkY <= maxChunkY; ++currChunkY) {
@@ -4518,7 +4527,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
                         continue;
                     }
                     final net.minecraft.world.level.chunk.LevelChunkSection section = sections[sectionIdx];
-                    if (section.hasOnlyAir()) {
+                    if (section == null || section.hasOnlyAir() || section.fluidStateCount == 0) { // Pufferfish - skip if no fluids present
                         // empty
                         continue;
                     }
diff --git a/net/minecraft/world/entity/EntityType.java b/net/minecraft/world/entity/EntityType.java
index 8af02ed823da098a5592ef195c9fe8ed8f245b53..8acbc78872795fe603820fce1c6e53ee554d6649 100644
--- a/net/minecraft/world/entity/EntityType.java
+++ b/net/minecraft/world/entity/EntityType.java
@@ -1083,6 +1083,8 @@ public class EntityType<T extends Entity> implements FeatureElement, EntityTypeT
     private final float spawnDimensionsScale;
     private final FeatureFlagSet requiredFeatures;
 
+    public boolean dabEnabled = false; // Pufferfish - DAB
+
     private static <T extends Entity> EntityType<T> register(ResourceKey<EntityType<?>> key, EntityType.Builder<T> builder) {
         return Registry.register(BuiltInRegistries.ENTITY_TYPE, key, builder.build(key));
     }
diff --git a/net/minecraft/world/entity/LivingEntity.java b/net/minecraft/world/entity/LivingEntity.java
index 3e8f4f3c3d43c6875108295187023c48eece2788..ff50722e396d1bb11682266c6d008cc6955e352f 100644
--- a/net/minecraft/world/entity/LivingEntity.java
+++ b/net/minecraft/world/entity/LivingEntity.java
@@ -423,7 +423,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
 
         if (this.isAlive() && this.level() instanceof ServerLevel serverLevel1) {
             boolean flag = this instanceof Player;
-            if (this.isInWall()) {
+            if (this.shouldCheckForSuffocation() && this.isInWall()) { // Pufferfish - optimize suffocation
                 this.hurtServer(serverLevel1, this.damageSources().inWall(), 1.0F);
             } else if (flag && !serverLevel1.getWorldBorder().isWithinBounds(this.getBoundingBox())) {
                 double d = serverLevel1.getWorldBorder().getDistanceToBorder(this) + serverLevel1.getWorldBorder().getDamageSafeZone();
@@ -1372,6 +1372,16 @@ public abstract class LivingEntity extends Entity implements Attackable {
         return this.getHealth() <= 0.0F;
     }
 
+    // Pufferfish start - optimize suffocation
+    public boolean couldPossiblyBeHurt(float amount) {
+        return !((float) this.invulnerableTime > (float) this.invulnerableDuration / 2.0F) || !(amount <= this.lastHurt);
+    }
+
+    public boolean shouldCheckForSuffocation() {
+        return !gg.pufferfish.pufferfish.PufferfishConfig.enableSuffocationOptimization || (tickCount % 10 == 0 && couldPossiblyBeHurt(1.0F));
+    }
+    // Pufferfish end - optimize suffocation
+
     @Override
     public boolean hurtServer(ServerLevel level, DamageSource damageSource, float amount) {
         if (this.isInvulnerableTo(level, damageSource)) {
@@ -2088,6 +2098,19 @@ public abstract class LivingEntity extends Entity implements Attackable {
         return this.lastClimbablePos;
     }
 
+    // Pufferfish start
+    private boolean cachedOnClimable = false;
+    private @Nullable BlockPos lastClimbingPosition = null;
+
+    public boolean onClimableCached() {
+        if (!this.blockPosition().equals(this.lastClimbingPosition)) {
+            this.cachedOnClimable = this.onClimbable();
+            this.lastClimbingPosition = this.blockPosition();
+        }
+        return this.cachedOnClimable;
+    }
+    // Pufferfish end
+
     public boolean onClimbable() {
         if (this.isSpectator()) {
             return false;
diff --git a/net/minecraft/world/entity/Mob.java b/net/minecraft/world/entity/Mob.java
index 73ba442b9d39bc021cd5eb6c1c0f98aed94a5a02..bc515db5b5b39ee90a22ca9f5eb243d7350fa776 100644
--- a/net/minecraft/world/entity/Mob.java
+++ b/net/minecraft/world/entity/Mob.java
@@ -203,14 +203,17 @@ public abstract class Mob extends LivingEntity implements EquipmentUser, Leashab
         return this.lookControl;
     }
 
+    int _pufferfish_inactiveTickDisableCounter = 0; // Pufferfish - throttle inactive goal selector ticking
+
     // Paper start
     @Override
     public void inactiveTick() {
         super.inactiveTick();
-        if (this.goalSelector.inactiveTick()) {
+        boolean isThrottled = gg.pufferfish.pufferfish.PufferfishConfig.throttleInactiveGoalSelectorTick && _pufferfish_inactiveTickDisableCounter++ % 20 != 0; // Pufferfish - throttle inactive goal selector ticking
+        if (this.goalSelector.inactiveTick(this.activatedPriority, true) && !isThrottled) { // Pufferfish - pass activated priroity // Pufferfish - throttle inactive goal selector ticking
             this.goalSelector.tick();
         }
-        if (this.targetSelector.inactiveTick()) {
+        if (this.targetSelector.inactiveTick(this.activatedPriority, true)) { // Pufferfish - pass activated priority
             this.targetSelector.tick();
         }
     }
@@ -731,16 +734,20 @@ public abstract class Mob extends LivingEntity implements EquipmentUser, Leashab
         int i = this.tickCount + this.getId();
         if (i % 2 != 0 && this.tickCount > 1) {
             profilerFiller.push("targetSelector");
+            if (this.targetSelector.inactiveTick(this.activatedPriority, false)) // Pufferfish - use this to alternate ticking
             this.targetSelector.tickRunningGoals(false);
             profilerFiller.pop();
             profilerFiller.push("goalSelector");
+            if (this.goalSelector.inactiveTick(this.activatedPriority, false)) // Pufferfish - use this to alternate ticking
             this.goalSelector.tickRunningGoals(false);
             profilerFiller.pop();
         } else {
             profilerFiller.push("targetSelector");
+            if (this.targetSelector.inactiveTick(this.activatedPriority, false)) // Pufferfish - use this to alternate ticking
             this.targetSelector.tick();
             profilerFiller.pop();
             profilerFiller.push("goalSelector");
+            if (this.goalSelector.inactiveTick(this.activatedPriority, false)) // Pufferfish - use this to alternate ticking
             this.goalSelector.tick();
             profilerFiller.pop();
         }
@@ -767,6 +774,19 @@ public abstract class Mob extends LivingEntity implements EquipmentUser, Leashab
         DebugPackets.sendGoalSelector(this.level(), this, this.goalSelector);
     }
 
+    // Pufferfish start - DAB
+    protected int pufferfish$brainTick = 0;
+
+    protected final boolean checkBrainTick() {
+        int tick = this.level().getServer().getTickCount();
+        if (tick < this.pufferfish$brainTick) {
+            return false; // brain tick not reached yet
+        }
+        this.pufferfish$brainTick = tick + this.activatedPriority;
+        return true;
+    }
+    // Pufferfish end - DAB
+
     protected void customServerAiStep(ServerLevel level) {
     }
 
diff --git a/net/minecraft/world/entity/ai/attributes/AttributeMap.java b/net/minecraft/world/entity/ai/attributes/AttributeMap.java
index bed9b564c493cd84bf53fc49368fda736f3fbc2b..f207604c6a1e22e76f8bc4adba5210e3b806b627 100644
--- a/net/minecraft/world/entity/ai/attributes/AttributeMap.java
+++ b/net/minecraft/world/entity/ai/attributes/AttributeMap.java
@@ -18,9 +18,11 @@ public class AttributeMap {
     private final Set<AttributeInstance> attributesToSync = new ObjectOpenHashSet<>();
     private final Set<AttributeInstance> attributesToUpdate = new ObjectOpenHashSet<>();
     private final AttributeSupplier supplier;
+    private final java.util.function.Function<Holder<Attribute>, AttributeInstance> createInstance; // Pufferfish - cache lambda
 
     public AttributeMap(AttributeSupplier supplier) {
         this.supplier = supplier;
+        this.createInstance = attribute -> this.supplier.createInstance(this::onAttributeModified, attribute); // Pufferfish - cache lambda
     }
 
     private void onAttributeModified(AttributeInstance instance) {
@@ -44,7 +46,7 @@ public class AttributeMap {
 
     @Nullable
     public AttributeInstance getInstance(Holder<Attribute> attribute) {
-        return this.attributes.computeIfAbsent(attribute, holder -> this.supplier.createInstance(this::onAttributeModified, (Holder<Attribute>)holder));
+        return this.attributes.computeIfAbsent(attribute, this.createInstance); // Pufferfish - cache lambda; for some reason java always allocates it
     }
 
     public boolean hasAttribute(Holder<Attribute> attribute) {
diff --git a/net/minecraft/world/entity/ai/behavior/VillagerPanicTrigger.java b/net/minecraft/world/entity/ai/behavior/VillagerPanicTrigger.java
index f6c673b1abe53afcb14fd68d590431027ed29f67..b0d977dbe57969c0367d0661daf423579777fd32 100644
--- a/net/minecraft/world/entity/ai/behavior/VillagerPanicTrigger.java
+++ b/net/minecraft/world/entity/ai/behavior/VillagerPanicTrigger.java
@@ -36,7 +36,10 @@ public class VillagerPanicTrigger extends Behavior<Villager> {
 
     @Override
     protected void tick(ServerLevel level, Villager owner, long gameTime) {
-        if (gameTime % 100L == 0L) {
+        // Pufferfish start - DAB; reduce side effects :)
+        if (owner.nextGolemPanic < gameTime) {
+            owner.nextGolemPanic = gameTime + 100;
+            // Pufferfish end - DAB; reduce side effects :)
             owner.spawnGolemIfNeeded(level, gameTime, 3);
         }
     }
diff --git a/net/minecraft/world/entity/ai/goal/GoalSelector.java b/net/minecraft/world/entity/ai/goal/GoalSelector.java
index a927c2790c8ab9ccaa7161b970e10b0b44817dd8..1a843a1a0639d9ee376783767352b252b0527d86 100644
--- a/net/minecraft/world/entity/ai/goal/GoalSelector.java
+++ b/net/minecraft/world/entity/ai/goal/GoalSelector.java
@@ -38,9 +38,12 @@ public class GoalSelector {
     }
 
     // Paper start - EAR 2
-    public boolean inactiveTick() {
+    public boolean inactiveTick(int tickRate, boolean inactive) { // Pufferfish start
+        if (inactive && !gg.pufferfish.pufferfish.PufferfishConfig.dearEnabled) tickRate = 4; // reset to Paper's
+        tickRate = Math.min(tickRate, 3); // 3 = newGoalRate
         this.curRate++;
-        return this.curRate % 3 == 0; // TODO newGoalRate was already unused in 1.20.4, check if this is correct
+        return this.curRate % tickRate == 0; // TODO newGoalRate was already unused in 1.20.4, check if this is correct
+        // Pufferfish end
     }
 
     public boolean hasTasks() {
diff --git a/net/minecraft/world/entity/ai/goal/MoveToBlockGoal.java b/net/minecraft/world/entity/ai/goal/MoveToBlockGoal.java
index d0ab3db7bbd2942db19f473474371b20ce822608..1414683f1cdd2386899d525c5a76b409b9e5eb32 100644
--- a/net/minecraft/world/entity/ai/goal/MoveToBlockGoal.java
+++ b/net/minecraft/world/entity/ai/goal/MoveToBlockGoal.java
@@ -119,6 +119,13 @@ public abstract class MoveToBlockGoal extends Goal {
                 for (int i4 = 0; i4 <= i3; i4 = i4 > 0 ? -i4 : 1 - i4) {
                     for (int i5 = i4 < i3 && i4 > -i3 ? i3 : 0; i5 <= i3; i5 = i5 > 0 ? -i5 : 1 - i5) {
                         mutableBlockPos.setWithOffset(blockPos, i4, i2 - 1, i5);
+
+                        // Pufferfish start - if this block isn't loaded, continue
+                        if (!this.mob.level().hasChunkAt(mutableBlockPos)) {
+                            continue;
+                        }
+                        // Pufferfish ends - if this block isn't loaded, continue
+
                         if (this.mob.isWithinRestriction(mutableBlockPos) && this.isValidTarget(this.mob.level(), mutableBlockPos)) {
                             this.blockPos = mutableBlockPos;
                             this.mob.movingTarget = mutableBlockPos == BlockPos.ZERO ? null : mutableBlockPos.immutable(); // Paper
diff --git a/net/minecraft/world/entity/ai/targeting/TargetingConditions.java b/net/minecraft/world/entity/ai/targeting/TargetingConditions.java
index 2f8920d8ee765d057a22d76f24f7d7dc1b0b17ca..eb9a2ca775113ad6fced58a81cc388b4153e41bc 100644
--- a/net/minecraft/world/entity/ai/targeting/TargetingConditions.java
+++ b/net/minecraft/world/entity/ai/targeting/TargetingConditions.java
@@ -75,9 +75,12 @@ public class TargetingConditions {
                 }
 
                 if (this.range > 0.0) {
+                    // Pufferfish start - check range before getting visibility
+                    double d1 = entity.distanceToSqr(target.getX(), target.getY(), target.getZ());
+                    if (d1 > this.range * this.range) return false;
                     double d = this.testInvisible ? target.getVisibilityPercent(entity) : 1.0;
                     double max = Math.max(this.range * d, 2.0);
-                    double d1 = entity.distanceToSqr(target.getX(), target.getY(), target.getZ());
+                    // Pufferfish end - check range before getting visibility
                     if (d1 > max * max) {
                         return false;
                     }
diff --git a/net/minecraft/world/entity/ambient/Bat.java b/net/minecraft/world/entity/ambient/Bat.java
index eb9fb57440f498079182030a46034008d3f6b5e8..fe5664a9307c1f17be98d81528bdf9a5852142fb 100644
--- a/net/minecraft/world/entity/ambient/Bat.java
+++ b/net/minecraft/world/entity/ambient/Bat.java
@@ -244,7 +244,21 @@ public class Bat extends AmbientCreature {
         }
     }
 
+    // Pufferfish start - spooky season cache
+    private static boolean isSpookySeason = false;
+    private static final int ONE_HOUR = 20 * 60 * 60;
+    private static int lastSpookyCheck = -ONE_HOUR;
+
     private static boolean isHalloween() {
+        if (net.minecraft.server.MinecraftServer.currentTick - lastSpookyCheck > ONE_HOUR) {
+            isSpookySeason = isHalloween0();
+            lastSpookyCheck = net.minecraft.server.MinecraftServer.currentTick;
+        }
+        return isSpookySeason;
+    }
+
+    private static boolean isHalloween0() {
+        // Pufferfish end - spooky season cache
         LocalDate localDate = LocalDate.now();
         int i = localDate.get(ChronoField.DAY_OF_MONTH);
         int i1 = localDate.get(ChronoField.MONTH_OF_YEAR);
diff --git a/net/minecraft/world/entity/animal/allay/Allay.java b/net/minecraft/world/entity/animal/allay/Allay.java
index eaa1745d34323cd684782a7fb2e153851a736471..2d0368cb962f25d117003d3605fe794634dba28a 100644
--- a/net/minecraft/world/entity/animal/allay/Allay.java
+++ b/net/minecraft/world/entity/animal/allay/Allay.java
@@ -243,6 +243,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
     protected void customServerAiStep(ServerLevel level) {
         ProfilerFiller profilerFiller = Profiler.get();
         profilerFiller.push("allayBrain");
+        if (this.checkBrainTick()) // Pufferfish - DAB
         this.getBrain().tick(level, this);
         profilerFiller.pop();
         profilerFiller.push("allayActivityUpdate");
diff --git a/net/minecraft/world/entity/animal/armadillo/Armadillo.java b/net/minecraft/world/entity/animal/armadillo/Armadillo.java
index b72e07ad954efa7f26f876a59f428086b40d9bb2..2e02b71e5ad83cf0ff44e70b2057947b2c9c6ed6 100644
--- a/net/minecraft/world/entity/animal/armadillo/Armadillo.java
+++ b/net/minecraft/world/entity/animal/armadillo/Armadillo.java
@@ -136,6 +136,7 @@ public class Armadillo extends Animal {
     protected void customServerAiStep(ServerLevel level) {
         ProfilerFiller profilerFiller = Profiler.get();
         profilerFiller.push("armadilloBrain");
+        if (this.checkBrainTick()) // Pufferfish - DAB
         ((Brain<Armadillo>)this.brain).tick(level, this);
         profilerFiller.pop();
         profilerFiller.push("armadilloActivityUpdate");
diff --git a/net/minecraft/world/entity/animal/axolotl/Axolotl.java b/net/minecraft/world/entity/animal/axolotl/Axolotl.java
index 233025bc1d4ba2590223def9b206140c68ea5f26..1ab4d8c67f5f7c3f092b858c889e4d9f0a6116ab 100644
--- a/net/minecraft/world/entity/animal/axolotl/Axolotl.java
+++ b/net/minecraft/world/entity/animal/axolotl/Axolotl.java
@@ -329,6 +329,7 @@ public class Axolotl extends Animal implements Bucketable {
     protected void customServerAiStep(ServerLevel level) {
         ProfilerFiller profilerFiller = Profiler.get();
         profilerFiller.push("axolotlBrain");
+        if (this.checkBrainTick()) // Pufferfish - DAB
         this.getBrain().tick(level, this);
         profilerFiller.pop();
         profilerFiller.push("axolotlActivityUpdate");
diff --git a/net/minecraft/world/entity/animal/camel/Camel.java b/net/minecraft/world/entity/animal/camel/Camel.java
index 6336fb58f4314be2fe987d7e3de258d977369417..f1f4c455585d1414f44eb79f91ab4caab49d236d 100644
--- a/net/minecraft/world/entity/animal/camel/Camel.java
+++ b/net/minecraft/world/entity/animal/camel/Camel.java
@@ -160,6 +160,7 @@ public class Camel extends AbstractHorse {
         ProfilerFiller profilerFiller = Profiler.get();
         profilerFiller.push("camelBrain");
         Brain<?> brain = this.getBrain();
+        if (this.checkBrainTick()) // Pufferfish - DAB
         ((Brain<Camel>)brain).tick(level, this);
         profilerFiller.pop();
         profilerFiller.push("camelActivityUpdate");
diff --git a/net/minecraft/world/entity/animal/frog/Frog.java b/net/minecraft/world/entity/animal/frog/Frog.java
index 8ffbe420528cd63f30f9b41d4fb0a6519042eadc..3a5b388ef82040893e61996d9ceffecf9f604f8c 100644
--- a/net/minecraft/world/entity/animal/frog/Frog.java
+++ b/net/minecraft/world/entity/animal/frog/Frog.java
@@ -205,6 +205,7 @@ public class Frog extends Animal {
     protected void customServerAiStep(ServerLevel level) {
         ProfilerFiller profilerFiller = Profiler.get();
         profilerFiller.push("frogBrain");
+        if (this.checkBrainTick()) // Pufferfish - DAB
         this.getBrain().tick(level, this);
         profilerFiller.pop();
         profilerFiller.push("frogActivityUpdate");
diff --git a/net/minecraft/world/entity/animal/frog/Tadpole.java b/net/minecraft/world/entity/animal/frog/Tadpole.java
index ebdfd3fb6c0de48982d392bb2aa415f3676c6056..f466e0f5df169c50548f051c0ff01fda6ac514a1 100644
--- a/net/minecraft/world/entity/animal/frog/Tadpole.java
+++ b/net/minecraft/world/entity/animal/frog/Tadpole.java
@@ -100,6 +100,7 @@ public class Tadpole extends AbstractFish {
     protected void customServerAiStep(ServerLevel level) {
         ProfilerFiller profilerFiller = Profiler.get();
         profilerFiller.push("tadpoleBrain");
+        if (this.checkBrainTick()) // Pufferfish - DAB
         this.getBrain().tick(level, this);
         profilerFiller.pop();
         profilerFiller.push("tadpoleActivityUpdate");
diff --git a/net/minecraft/world/entity/animal/goat/Goat.java b/net/minecraft/world/entity/animal/goat/Goat.java
index b22321ead9d66cb089b67276743624b3cca52fc1..f101f9f99cbe6f582533b7b73b0937c36c387f11 100644
--- a/net/minecraft/world/entity/animal/goat/Goat.java
+++ b/net/minecraft/world/entity/animal/goat/Goat.java
@@ -191,6 +191,7 @@ public class Goat extends Animal {
     protected void customServerAiStep(ServerLevel level) {
         ProfilerFiller profilerFiller = Profiler.get();
         profilerFiller.push("goatBrain");
+        if (this.checkBrainTick()) // Pufferfish - DAB
         this.getBrain().tick(level, this);
         profilerFiller.pop();
         profilerFiller.push("goatActivityUpdate");
diff --git a/net/minecraft/world/entity/animal/sniffer/Sniffer.java b/net/minecraft/world/entity/animal/sniffer/Sniffer.java
index d34dcbbdeae41d23d6fb497e0e8da038580b6d01..f57e06590d28033f0e80966be1551ec33a1ec484 100644
--- a/net/minecraft/world/entity/animal/sniffer/Sniffer.java
+++ b/net/minecraft/world/entity/animal/sniffer/Sniffer.java
@@ -456,6 +456,7 @@ public class Sniffer extends Animal {
     protected void customServerAiStep(ServerLevel level) {
         ProfilerFiller profilerFiller = Profiler.get();
         profilerFiller.push("snifferBrain");
+        if (this.checkBrainTick()) // Pufferfish - DAB
         this.getBrain().tick(level, this);
         profilerFiller.popPush("snifferActivityUpdate");
         SnifferAi.updateActivity(this);
diff --git a/net/minecraft/world/entity/boss/wither/WitherBoss.java b/net/minecraft/world/entity/boss/wither/WitherBoss.java
index 09924cccf9208abda22cc7e1635b567ed166e95a..0a1a47bfd4f7242f936e2bbcd2680edf6adcccca 100644
--- a/net/minecraft/world/entity/boss/wither/WitherBoss.java
+++ b/net/minecraft/world/entity/boss/wither/WitherBoss.java
@@ -135,6 +135,13 @@ public class WitherBoss extends Monster implements RangedAttackMob {
         this.bossEvent.setName(this.getDisplayName());
     }
 
+    // Pufferfish start - optimize suffocation
+    @Override
+    public boolean shouldCheckForSuffocation() {
+        return true;
+    }
+    // Pufferfish end - optimize suffocation
+
     @Override
     public SoundEvent getAmbientSound() {
         return SoundEvents.WITHER_AMBIENT;
diff --git a/net/minecraft/world/entity/monster/EnderMan.java b/net/minecraft/world/entity/monster/EnderMan.java
index 5ae08be75ca01924fc78bdd8d6bb6747ddc21aea..4046d600fe382913cf24553fef6d1d74c6eca9f8 100644
--- a/net/minecraft/world/entity/monster/EnderMan.java
+++ b/net/minecraft/world/entity/monster/EnderMan.java
@@ -300,6 +300,12 @@ public class EnderMan extends Monster implements NeutralMob {
     private boolean teleport(double x, double y, double z) {
         BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos(x, y, z);
 
+        // Pufferfish start - don't teleport into unloaded chunks
+        if (this.level().getChunkIfLoadedImmediately(mutableBlockPos) == null) {
+            return false;
+        }
+        // Pufferfish end - don't teleport into unloaded chunks
+
         while (mutableBlockPos.getY() > this.level().getMinY() && !this.level().getBlockState(mutableBlockPos).blocksMotion()) {
             mutableBlockPos.move(Direction.DOWN);
         }
diff --git a/net/minecraft/world/entity/monster/Zoglin.java b/net/minecraft/world/entity/monster/Zoglin.java
index 4405f465ad5b136390c4204b177967c6e47738dd..e885bd6d97419e182ffdca5b5b42f1eee103df62 100644
--- a/net/minecraft/world/entity/monster/Zoglin.java
+++ b/net/minecraft/world/entity/monster/Zoglin.java
@@ -251,6 +251,7 @@ public class Zoglin extends Monster implements HoglinBase {
     protected void customServerAiStep(ServerLevel level) {
         ProfilerFiller profilerFiller = Profiler.get();
         profilerFiller.push("zoglinBrain");
+        if (this.checkBrainTick()) // Pufferfish - DAB
         this.getBrain().tick(level, this);
         profilerFiller.pop();
         this.updateActivity();
diff --git a/net/minecraft/world/entity/monster/breeze/Breeze.java b/net/minecraft/world/entity/monster/breeze/Breeze.java
index c12653070d62c44b97a07676f24caf7ab570cd2a..8df9e213c395d79f08ed7d3b12520e2719e6a2d7 100644
--- a/net/minecraft/world/entity/monster/breeze/Breeze.java
+++ b/net/minecraft/world/entity/monster/breeze/Breeze.java
@@ -234,6 +234,7 @@ public class Breeze extends Monster {
     protected void customServerAiStep(ServerLevel level) {
         ProfilerFiller profilerFiller = Profiler.get();
         profilerFiller.push("breezeBrain");
+        if (this.checkBrainTick()) // Pufferfish - DAB
         this.getBrain().tick(level, this);
         profilerFiller.popPush("breezeActivityUpdate");
         BreezeAi.updateActivity(this);
diff --git a/net/minecraft/world/entity/monster/creaking/Creaking.java b/net/minecraft/world/entity/monster/creaking/Creaking.java
index bdefd070cfebe7f3f792c998f2f53be720cbfbcd..cbc330a6b29af5fa9bb640b29bd56d939bc60c96 100644
--- a/net/minecraft/world/entity/monster/creaking/Creaking.java
+++ b/net/minecraft/world/entity/monster/creaking/Creaking.java
@@ -206,6 +206,7 @@ public class Creaking extends Monster {
     protected void customServerAiStep(ServerLevel level) {
         ProfilerFiller profilerFiller = Profiler.get();
         profilerFiller.push("creakingBrain");
+        if (this.checkBrainTick()) // Pufferfish - DAB
         this.getBrain().tick((ServerLevel)this.level(), this);
         profilerFiller.pop();
         CreakingAi.updateActivity(this);
diff --git a/net/minecraft/world/entity/monster/hoglin/Hoglin.java b/net/minecraft/world/entity/monster/hoglin/Hoglin.java
index 0d05d21158a59dc3aa648c1d6541121c5bb547e6..590b555431e0dd764c00682bc74c4a6d22f58f18 100644
--- a/net/minecraft/world/entity/monster/hoglin/Hoglin.java
+++ b/net/minecraft/world/entity/monster/hoglin/Hoglin.java
@@ -163,6 +163,7 @@ public class Hoglin extends Animal implements Enemy, HoglinBase {
     protected void customServerAiStep(ServerLevel level) {
         ProfilerFiller profilerFiller = Profiler.get();
         profilerFiller.push("hoglinBrain");
+        if (this.checkBrainTick()) // Pufferfish - DAB
         this.getBrain().tick(level, this);
         profilerFiller.pop();
         HoglinAi.updateActivity(this);
diff --git a/net/minecraft/world/entity/monster/piglin/Piglin.java b/net/minecraft/world/entity/monster/piglin/Piglin.java
index e200e974e46de6166d56e051806c00a69aefc9bb..6022213f411849800111b7ea13a32d912405b199 100644
--- a/net/minecraft/world/entity/monster/piglin/Piglin.java
+++ b/net/minecraft/world/entity/monster/piglin/Piglin.java
@@ -321,6 +321,7 @@ public class Piglin extends AbstractPiglin implements CrossbowAttackMob, Invento
     protected void customServerAiStep(ServerLevel level) {
         ProfilerFiller profilerFiller = Profiler.get();
         profilerFiller.push("piglinBrain");
+        if (this.checkBrainTick()) // Pufferfish - DAB
         this.getBrain().tick(level, this);
         profilerFiller.pop();
         PiglinAi.updateActivity(this);
diff --git a/net/minecraft/world/entity/monster/piglin/PiglinBrute.java b/net/minecraft/world/entity/monster/piglin/PiglinBrute.java
index 219978cb0341b2d691f44c1146707d875788881e..28d4f5132616cb5207c498ade81002a5c11501d6 100644
--- a/net/minecraft/world/entity/monster/piglin/PiglinBrute.java
+++ b/net/minecraft/world/entity/monster/piglin/PiglinBrute.java
@@ -117,6 +117,7 @@ public class PiglinBrute extends AbstractPiglin {
     protected void customServerAiStep(ServerLevel level) {
         ProfilerFiller profilerFiller = Profiler.get();
         profilerFiller.push("piglinBruteBrain");
+        if (this.checkBrainTick()) // Pufferfish - DAB
         this.getBrain().tick(level, this);
         profilerFiller.pop();
         PiglinBruteAi.updateActivity(this);
diff --git a/net/minecraft/world/entity/monster/warden/Warden.java b/net/minecraft/world/entity/monster/warden/Warden.java
index cd28ca290c081d9f5e4498f59d7b87a566f81544..3d273dc63e795d4e14508f89247fc4ee3cdacd6b 100644
--- a/net/minecraft/world/entity/monster/warden/Warden.java
+++ b/net/minecraft/world/entity/monster/warden/Warden.java
@@ -283,6 +283,7 @@ public class Warden extends Monster implements VibrationSystem {
     protected void customServerAiStep(ServerLevel level) {
         ProfilerFiller profilerFiller = Profiler.get();
         profilerFiller.push("wardenBrain");
+        if (this.checkBrainTick()) // Pufferfish - DAB
         this.getBrain().tick(level, this);
         profilerFiller.pop();
         super.customServerAiStep(level);
diff --git a/net/minecraft/world/entity/npc/Villager.java b/net/minecraft/world/entity/npc/Villager.java
index e0e0d2ea7fc60e3142c675404d152eca60263240..2b5e3d156e02634555ebb3c9b2e5a259e41da955 100644
--- a/net/minecraft/world/entity/npc/Villager.java
+++ b/net/minecraft/world/entity/npc/Villager.java
@@ -179,6 +179,8 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         (villager, poiType) -> poiType.is(PoiTypes.MEETING)
     );
 
+    public long nextGolemPanic = -1; // Pufferfish
+
     public Villager(EntityType<? extends Villager> entityType, Level level) {
         this(entityType, level, VillagerType.PLAINS);
     }
@@ -296,7 +298,12 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         // Paper end - EAR 2
         ProfilerFiller profilerFiller = Profiler.get();
         profilerFiller.push("villagerBrain");
-        if (!inactive) this.getBrain().tick(level, this); // Paper - EAR 2
+        // Pufferfish start - DAB
+        if (!inactive) { // Paper - EAR 2
+            if (this.checkBrainTick()) // Pufferfish - DAB
+            this.getBrain().tick(level, this);
+        }
+        // Pufferfish end - DAB
         profilerFiller.pop();
         if (this.assignProfessionWhenSpawned) {
             this.assignProfessionWhenSpawned = false;
diff --git a/net/minecraft/world/entity/player/Inventory.java b/net/minecraft/world/entity/player/Inventory.java
index d9cb4f0ed0c4f63362c837aeef3c4194911455c9..6ff80e8aa54b7e1956a5c40d748f522122414114 100644
--- a/net/minecraft/world/entity/player/Inventory.java
+++ b/net/minecraft/world/entity/player/Inventory.java
@@ -591,7 +591,7 @@ public class Inventory implements Container, Nameable {
     }
 
     public void replaceWith(Inventory playerInventory) {
-        for (int i = 0; i < this.getContainerSize(); i++) {
+        for (int i = 0, len = this.getContainerSize(); i < len; ++i) { // Pufferfish - optimized loop
             this.setItem(i, playerInventory.getItem(i));
         }
 
diff --git a/net/minecraft/world/entity/projectile/Projectile.java b/net/minecraft/world/entity/projectile/Projectile.java
index 4487c03183d20a187d391dd124abb7b926508b5b..982643c65429444fce9a92306066f62824a3011c 100644
--- a/net/minecraft/world/entity/projectile/Projectile.java
+++ b/net/minecraft/world/entity/projectile/Projectile.java
@@ -53,6 +53,36 @@ public abstract class Projectile extends Entity implements TraceableEntity {
         super(entityType, level);
     }
 
+    // Pufferfish start - limit projectile chunk loading
+    private static int loadedThisTick = 0;
+    private static int loadedTick;
+    private int loadedLifetime = 0;
+
+    @Override
+    public void setPos(double x, double y, double z) {
+        int currentTick = net.minecraft.server.MinecraftServer.currentTick;
+        if (loadedTick != currentTick) {
+            loadedTick = currentTick;
+            loadedThisTick = 0;
+        }
+        int previousX = Mth.floor(this.getX()) >> 4, previousZ = Mth.floor(this.getZ()) >> 4;
+        int newX = Mth.floor(x) >> 4, newZ = Mth.floor(z) >> 4;
+        if (previousX != newX || previousZ != newZ) {
+            boolean isLoaded = ((net.minecraft.server.level.ServerChunkCache) this.level().getChunkSource()).getChunkAtIfLoadedImmediately(newX, newZ) != null;
+            if (!isLoaded) {
+                if (Projectile.loadedThisTick > gg.pufferfish.pufferfish.PufferfishConfig.maxProjectileLoadsPerTick) {
+                    if (++this.loadedLifetime > gg.pufferfish.pufferfish.PufferfishConfig.maxProjectileLoadsPerProjectile) {
+                        this.discard(org.bukkit.event.entity.EntityRemoveEvent.Cause.DISCARD);
+                    }
+                    return;
+                }
+                Projectile.loadedThisTick++;
+            }
+        }
+        super.setPos(x, y, z);
+    }
+    // Pufferfish start - limit projectile chunk loading
+
     public void setOwner(@Nullable Entity owner) {
         if (owner != null) {
             this.ownerUUID = owner.getUUID();
diff --git a/net/minecraft/world/entity/vehicle/AbstractMinecartContainer.java b/net/minecraft/world/entity/vehicle/AbstractMinecartContainer.java
index a7e2f23ed3279801504f99fc3c5f972e8c1b984f..b69cb536a0cd3ee2d8793b0281be843c5810006d 100644
--- a/net/minecraft/world/entity/vehicle/AbstractMinecartContainer.java
+++ b/net/minecraft/world/entity/vehicle/AbstractMinecartContainer.java
@@ -21,7 +21,8 @@ import net.minecraft.world.level.storage.loot.LootTable;
 import net.minecraft.world.phys.Vec3;
 
 public abstract class AbstractMinecartContainer extends AbstractMinecart implements ContainerEntity {
-    private NonNullList<ItemStack> itemStacks = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY); // CraftBukkit - SPIGOT-3513
+    private gg.airplane.structs.ItemListWithBitset itemStacksOptimized = new gg.airplane.structs.ItemListWithBitset(this.getContainerSize()); // Pufferfish
+    private NonNullList<ItemStack> itemStacks = this.itemStacksOptimized.nonNullList; // CraftBukkit - SPIGOT-3513 // Pufferfish
     @Nullable
     public ResourceKey<LootTable> lootTable;
     public long lootTableSeed;
@@ -163,7 +164,7 @@ public abstract class AbstractMinecartContainer extends AbstractMinecart impleme
 
     @Override
     public void clearItemStacks() {
-        this.itemStacks = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY);
+        this.itemStacks = (this.itemStacksOptimized = new gg.airplane.structs.ItemListWithBitset(this.getContainerSize())).nonNullList; // Pufferfish
     }
 
     // Paper start - LootTable API
diff --git a/net/minecraft/world/item/EndCrystalItem.java b/net/minecraft/world/item/EndCrystalItem.java
index 05ec512839898f96d9769bb0d00f6ba11dda0c4b..f37ac37344d2b30662306aff59c610d1aa809139 100644
--- a/net/minecraft/world/item/EndCrystalItem.java
+++ b/net/minecraft/world/item/EndCrystalItem.java
@@ -50,6 +50,7 @@ public class EndCrystalItem extends Item {
                         level.addFreshEntity(endCrystal);
                         level.gameEvent(context.getPlayer(), GameEvent.ENTITY_PLACE, blockPos);
                         EndDragonFight dragonFight = ((ServerLevel)level).getDragonFight();
+                        if (gg.pufferfish.pufferfish.PufferfishConfig.allowEndCrystalRespawn) // Pufferfish
                         if (dragonFight != null) {
                             dragonFight.tryRespawn(aboveBlockPos); // Paper - Perf: Do crystal-portal proximity check before entity lookup
                         }
diff --git a/net/minecraft/world/level/Level.java b/net/minecraft/world/level/Level.java
index 418d3958b7510d469142178f9427c829b6387d83..8eb11074c3ddcc7ca55e382459bc4a2ac02caff5 100644
--- a/net/minecraft/world/level/Level.java
+++ b/net/minecraft/world/level/Level.java
@@ -1481,12 +1481,12 @@ public abstract class Level implements LevelAccessor, UUIDLookup<Entity>, AutoCl
     public <T extends Entity> void guardEntityTick(Consumer<T> consumerEntity, T entity) {
         try {
             consumerEntity.accept(entity);
-        } catch (Throwable var6) {
+        } catch (Throwable var6) { // Pufferfish - diff on change ServerLevel.tick
             // Paper start - Prevent block entity and entity crashes
             final String msg = String.format("Entity threw exception at %s:%s,%s,%s", entity.level().getWorld().getName(), entity.getX(), entity.getY(), entity.getZ());
             MinecraftServer.LOGGER.error(msg, var6);
             getCraftServer().getPluginManager().callEvent(new com.destroystokyo.paper.event.server.ServerExceptionEvent(new com.destroystokyo.paper.exception.ServerInternalException(msg, var6))); // Paper - ServerExceptionEvent
-            entity.discard(org.bukkit.event.entity.EntityRemoveEvent.Cause.DISCARD);
+            entity.discard(org.bukkit.event.entity.EntityRemoveEvent.Cause.DISCARD); // Pufferfish - diff on change ServerLevel.tick
             // Paper end - Prevent block entity and entity crashes
         }
         this.moonrise$midTickTasks(); // Paper - rewrite chunk system
diff --git a/net/minecraft/world/level/NaturalSpawner.java b/net/minecraft/world/level/NaturalSpawner.java
index 14a2514a408a66a83f7b5fb43b4c4dc8f23fd5f4..f5821c32f92bdd5bc682e27bd06ce9fedbcb32ee 100644
--- a/net/minecraft/world/level/NaturalSpawner.java
+++ b/net/minecraft/world/level/NaturalSpawner.java
@@ -441,12 +441,20 @@ public final class NaturalSpawner {
         }
     }
 
+    // Pufferfish start - async mob spawning; change level parameter type
+    @io.papermc.paper.annotation.DoNotUse
+    @Deprecated
     private static BlockPos getRandomPosWithin(Level level, LevelChunk chunk) {
+        return getRandomPosWithin((ServerLevel) level, chunk);
+    }
+
+    private static BlockPos getRandomPosWithin(ServerLevel level, LevelChunk chunk) {
+        // Pufferfish end - async mob spawning; change level parameter type
         ChunkPos pos = chunk.getPos();
-        int i = pos.getMinBlockX() + level.random.nextInt(16);
-        int i1 = pos.getMinBlockZ() + level.random.nextInt(16);
+        int i = pos.getMinBlockX() + level.simpleRandom.nextInt(16); // Pufferfish - async mob spawning; use simpleRandom
+        int i1 = pos.getMinBlockZ() + level.simpleRandom.nextInt(16); // Pufferfish - async mob spawning; use simpleRandom
         int i2 = chunk.getHeight(Heightmap.Types.WORLD_SURFACE, i, i1) + 1;
-        int i3 = Mth.randomBetweenInclusive(level.random, level.getMinY(), i2);
+        int i3 = Mth.randomBetweenInclusive(level.simpleRandom, level.getMinY(), i2); // Pufferfish - async mob spawning; use simpleRandom
         return new BlockPos(i, i3, i1);
     }
 
diff --git a/net/minecraft/world/level/biome/Biome.java b/net/minecraft/world/level/biome/Biome.java
index bad1a03167f7586e5279592adcb43350c9b528cd..1724f9e994e666e3e2eb2954c2152d3e0779fc65 100644
--- a/net/minecraft/world/level/biome/Biome.java
+++ b/net/minecraft/world/level/biome/Biome.java
@@ -68,14 +68,8 @@ public final class Biome {
     private final BiomeGenerationSettings generationSettings;
     private final MobSpawnSettings mobSettings;
     private final BiomeSpecialEffects specialEffects;
-    private final ThreadLocal<Long2FloatLinkedOpenHashMap> temperatureCache = ThreadLocal.withInitial(() -> Util.make(() -> {
-        Long2FloatLinkedOpenHashMap map = new Long2FloatLinkedOpenHashMap(1024, 0.25F) {
-            @Override
-            protected void rehash(int newSize) {
-            }
-        };
-        map.defaultReturnValue(Float.NaN);
-        return map;
+    private static final ThreadLocal<gg.airplane.structs.Long2FloatAgingCache> TEMPERATURE_CACHE = ThreadLocal.withInitial(() -> Util.make(() -> { // Pufferfish - improved temperature caching
+        return new gg.airplane.structs.Long2FloatAgingCache(TEMPERATURE_CACHE_SIZE); // Pufferfish - improved temperature caching
     }));
 
     Biome(Biome.ClimateSettings climateSettings, BiomeSpecialEffects specialEffects, BiomeGenerationSettings generationSettings, MobSpawnSettings mobSettings) {
@@ -118,7 +112,17 @@ public final class Biome {
 
     @Deprecated
     public float getTemperature(BlockPos pos, int seaLevel) {
-        return this.getHeightAdjustedTemperature(pos, seaLevel); // Paper - optimise random ticking
+        // Pufferfish start - improved temperature caching
+        gg.airplane.structs.Long2FloatAgingCache cache = TEMPERATURE_CACHE.get();
+        long longPos = pos.asLong();
+        float temperature = cache.getValue(longPos);
+        if (!Float.isNaN(temperature)) {
+            return temperature;
+        }
+        float calculatedTemperature = this.getHeightAdjustedTemperature(pos, seaLevel); // Paper - optimise random ticking
+        cache.putValue(longPos, calculatedTemperature);
+        return calculatedTemperature;
+        // Pufferfish end - improved temperature caching
     }
 
     public boolean shouldFreeze(LevelReader level, BlockPos pos) {
diff --git a/net/minecraft/world/level/block/entity/ChestBlockEntity.java b/net/minecraft/world/level/block/entity/ChestBlockEntity.java
index a7a095cc0ffdf7b0daf7b4d19c3e78bc4399fa7c..15477d6503ee319bdaa68c7d64c00fed2486d8fd 100644
--- a/net/minecraft/world/level/block/entity/ChestBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/ChestBlockEntity.java
@@ -26,7 +26,8 @@ import net.minecraft.world.level.block.state.properties.ChestType;
 
 public class ChestBlockEntity extends RandomizableContainerBlockEntity implements LidBlockEntity {
     private static final int EVENT_SET_OPEN_COUNT = 1;
-    private NonNullList<ItemStack> items = NonNullList.withSize(27, ItemStack.EMPTY);
+    private gg.airplane.structs.ItemListWithBitset optimizedItems = new gg.airplane.structs.ItemListWithBitset(27); // Pufferfish
+    private NonNullList<ItemStack> items = this.optimizedItems.nonNullList; // Pufferfish
     public final ContainerOpenersCounter openersCounter = new ContainerOpenersCounter() {
         @Override
         protected void onOpen(Level level, BlockPos pos, BlockState state) {
@@ -90,6 +91,8 @@ public class ChestBlockEntity extends RandomizableContainerBlockEntity implement
     }
     // CraftBukkit end
 
+    private final boolean isNative = getClass().equals(ChestBlockEntity.class); // Pufferfish
+
     protected ChestBlockEntity(BlockEntityType<?> type, BlockPos pos, BlockState blockState) {
         super(type, pos, blockState);
     }
@@ -98,6 +101,24 @@ public class ChestBlockEntity extends RandomizableContainerBlockEntity implement
         this(BlockEntityType.CHEST, pos, blockState);
     }
 
+    // Pufferfish start
+    @Override
+    public boolean hasEmptySlot(Direction enumdirection) {
+        return this.isNative ? !this.optimizedItems.hasFullStacks() : super.hasEmptySlot(enumdirection);
+    }
+
+    @Override
+    public boolean isCompletelyFull(Direction enumdirection) {
+        return this.isNative ? this.optimizedItems.hasFullStacks() && super.isCompletelyFull(enumdirection) : super.isCompletelyFull(enumdirection);
+    }
+
+    @Override
+    public boolean isCompletelyEmpty(Direction enumdirection) {
+        return this.isNative && this.optimizedItems.isCompletelyEmpty() || super.isCompletelyEmpty(enumdirection);
+    }
+    // Pufferfish end
+
+
     @Override
     public int getContainerSize() {
         return 27;
@@ -111,7 +132,7 @@ public class ChestBlockEntity extends RandomizableContainerBlockEntity implement
     @Override
     protected void loadAdditional(CompoundTag tag, HolderLookup.Provider registries) {
         super.loadAdditional(tag, registries);
-        this.items = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY);
+        this.items = (this.optimizedItems = new gg.airplane.structs.ItemListWithBitset(this.getContainerSize())).nonNullList; // Pufferfish
         if (!this.tryLoadLootTable(tag)) {
             ContainerHelper.loadAllItems(tag, this.items, registries);
         }
@@ -176,7 +197,7 @@ public class ChestBlockEntity extends RandomizableContainerBlockEntity implement
 
     @Override
     protected void setItems(NonNullList<ItemStack> items) {
-        this.items = items;
+        this.items = (this.optimizedItems = gg.airplane.structs.ItemListWithBitset.fromList(items)).nonNullList; // Pufferfish
     }
 
     @Override
diff --git a/net/minecraft/world/level/block/entity/HopperBlockEntity.java b/net/minecraft/world/level/block/entity/HopperBlockEntity.java
index 15d4f60942c0cc612c1468b4c0fda886867a67cb..fb0cd46cc92b5a0c9dba49f405045ab39987ac45 100644
--- a/net/minecraft/world/level/block/entity/HopperBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/HopperBlockEntity.java
@@ -33,7 +33,8 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     public static final int HOPPER_CONTAINER_SIZE = 5;
     private static final int[][] CACHED_SLOTS = new int[54][];
     private static final int NO_COOLDOWN_TIME = -1;
-    private NonNullList<ItemStack> items = NonNullList.withSize(5, ItemStack.EMPTY);
+    private gg.airplane.structs.ItemListWithBitset optimizedItems = new gg.airplane.structs.ItemListWithBitset(5); // Pufferfish
+    private NonNullList<ItemStack> items = this.optimizedItems.nonNullList; // Pufferfish
     public int cooldownTime = -1;
     private long tickedGameTime;
     private Direction facing;
@@ -77,10 +78,27 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
         this.facing = blockState.getValue(HopperBlock.FACING);
     }
 
+    // Pufferfish start
+    @Override
+    public boolean hasEmptySlot(Direction enumdirection) {
+        return !this.optimizedItems.hasFullStacks();
+    }
+
+    @Override
+    public boolean isCompletelyFull(Direction enumdirection) {
+        return this.optimizedItems.hasFullStacks() && super.isCompletelyFull(enumdirection);
+    }
+
+    @Override
+    public boolean isCompletelyEmpty(Direction enumdirection) {
+        return this.optimizedItems.isCompletelyEmpty() || super.isCompletelyEmpty(enumdirection);
+    }
+    // Pufferfish end
+
     @Override
     protected void loadAdditional(CompoundTag tag, HolderLookup.Provider registries) {
         super.loadAdditional(tag, registries);
-        this.items = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY);
+        this.items = (this.optimizedItems = new gg.airplane.structs.ItemListWithBitset(this.getContainerSize())).nonNullList; // Pufferfish
         if (!this.tryLoadLootTable(tag)) {
             ContainerHelper.loadAllItems(tag, this.items, registries);
         }
@@ -673,7 +691,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
         ItemStack item = destination.getItem(slot);
         if (canPlaceItemInContainer(destination, stack, slot, direction)) {
             boolean flag = false;
-            boolean isEmpty = destination.isEmpty();
+            boolean isEmpty = destination.isCompletelyEmpty(direction); // Pufferfish
             if (item.isEmpty()) {
                 // Spigot start - SPIGOT-6693, SimpleContainer#setItem
                 ItemStack leftover = ItemStack.EMPTY; // Paper - Make hoppers respect inventory max stack size
@@ -859,7 +877,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
 
     @Override
     protected void setItems(NonNullList<ItemStack> items) {
-        this.items = items;
+        this.items = (this.optimizedItems = gg.airplane.structs.ItemListWithBitset.fromList(items)).nonNullList; // Pufferfish
     }
 
     public static void entityInside(Level level, BlockPos pos, BlockState state, Entity entity, HopperBlockEntity blockEntity) {
diff --git a/net/minecraft/world/level/chunk/LevelChunk.java b/net/minecraft/world/level/chunk/LevelChunk.java
index 5d3fc807221392d378fec283bfdefb8747fb8376..47be1c15b97485c71eeb0e2580196f2483e95d54 100644
--- a/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/net/minecraft/world/level/chunk/LevelChunk.java
@@ -128,6 +128,19 @@ public class LevelChunk extends ChunkAccess implements ca.spottedleaf.moonrise.p
     }
     // Paper end - get block chunk optimisation
 
+    // Pufferfish start - instead of using a random every time the chunk is ticked, define when lightning strikes preemptively
+    private int lightningTick;
+
+    // shouldDoLightning compiles down to 29 bytes, which with the default of 35 byte inlining should guarantee an inline
+    public final boolean shouldDoLightning(net.minecraft.util.RandomSource random) {
+        if (this.lightningTick-- <= 0) {
+            this.lightningTick = random.nextInt(this.level.spigotConfig.thunderChance) << 1;
+            return true;
+        }
+        return false;
+    }
+    // Pufferfish end
+
     public LevelChunk(Level level, ChunkPos pos) {
         this(level, pos, UpgradeData.EMPTY, new LevelChunkTicks<>(), new LevelChunkTicks<>(), 0L, null, null, null);
     }
@@ -164,6 +177,8 @@ public class LevelChunk extends ChunkAccess implements ca.spottedleaf.moonrise.p
         this.debug = !empty && this.level.isDebug();
         this.defaultBlockState = empty ? VOID_AIR_BLOCKSTATE : AIR_BLOCKSTATE;
         // Paper end - get block chunk optimisation
+
+        this.lightningTick = this.level.simpleRandom != null ? this.level.simpleRandom.nextInt(this.level.spigotConfig.thunderChance) << 1 : 0; // Pufferfish - initialize lightning tick
     }
 
     public LevelChunk(ServerLevel level, ProtoChunk chunk, @Nullable LevelChunk.PostLoadProcessor postLoad) {
diff --git a/net/minecraft/world/level/chunk/LevelChunkSection.java b/net/minecraft/world/level/chunk/LevelChunkSection.java
index df717c545472006b99532280c38c1fbef12bcf82..678177f1fbc036184532fbf6b38fe442e507ca72 100644
--- a/net/minecraft/world/level/chunk/LevelChunkSection.java
+++ b/net/minecraft/world/level/chunk/LevelChunkSection.java
@@ -23,6 +23,7 @@ public class LevelChunkSection implements ca.spottedleaf.moonrise.patches.block_
     private short tickingFluidCount;
     public final PalettedContainer<BlockState> states;
     private PalettedContainer<Holder<Biome>> biomes; // CraftBukkit - read/write
+    public short fluidStateCount; // Pufferfish
 
     // Paper start - block counting
     private static final it.unimi.dsi.fastutil.shorts.ShortArrayList FULL_LIST = new it.unimi.dsi.fastutil.shorts.ShortArrayList(16*16*16);
@@ -152,6 +153,11 @@ public class LevelChunkSection implements ca.spottedleaf.moonrise.patches.block_
         if (!!fluidState.isRandomlyTicking()) { // Paper - block counting
             this.tickingFluidCount--;
         }
+        // Pufferfish start
+        if (!fluidState.isEmpty()) {
+            --this.fluidStateCount;
+        }
+        // Pufferfish end
 
         if (!state.isAir()) {
             this.nonEmptyBlockCount++;
@@ -163,6 +169,12 @@ public class LevelChunkSection implements ca.spottedleaf.moonrise.patches.block_
         if (!!fluidState1.isRandomlyTicking()) { // Paper - block counting
             this.tickingFluidCount++;
         }
+        // Pufferfish start
+        if (!fluidState1.isEmpty()) {
+            ++this.fluidStateCount;
+        }
+        // Pufferfish end
+
 
         this.updateBlockCallback(x, y, z, state, blockState); // Paper - block counting
 
@@ -191,6 +203,7 @@ public class LevelChunkSection implements ca.spottedleaf.moonrise.patches.block_
         this.nonEmptyBlockCount = (short)0;
         this.tickingBlockCount = (short)0;
         this.tickingFluidCount = (short)0;
+        this.fluidStateCount = (short)0; // Pufferfish
         this.specialCollidingBlocks = (short)0;
         this.tickingBlocks.clear();
 
@@ -246,6 +259,7 @@ public class LevelChunkSection implements ca.spottedleaf.moonrise.patches.block_
                     if (fluid.isRandomlyTicking()) {
                         this.tickingFluidCount += (short)paletteCount;
                     }
+                    LevelChunkSection.this.fluidStateCount++; // Pufferfish
                 }
             }
         }
diff --git a/net/minecraft/world/level/entity/EntityTickList.java b/net/minecraft/world/level/entity/EntityTickList.java
index 423779a2b690f387a4f0bd07b97b50e0baefda76..3c8c0c9a0f89b5f0534914704ff75a4a69e4a8fc 100644
--- a/net/minecraft/world/level/entity/EntityTickList.java
+++ b/net/minecraft/world/level/entity/EntityTickList.java
@@ -9,7 +9,7 @@ import javax.annotation.Nullable;
 import net.minecraft.world.entity.Entity;
 
 public class EntityTickList {
-    private final ca.spottedleaf.moonrise.common.list.IteratorSafeOrderedReferenceSet<net.minecraft.world.entity.Entity> entities = new ca.spottedleaf.moonrise.common.list.IteratorSafeOrderedReferenceSet<>(); // Paper - rewrite chunk system
+    public final ca.spottedleaf.moonrise.common.list.IteratorSafeOrderedReferenceSet<net.minecraft.world.entity.Entity> entities = new ca.spottedleaf.moonrise.common.list.IteratorSafeOrderedReferenceSet<>(); // Paper - rewrite chunk system // Pufferfish - private -> public
 
     private void ensureActiveIsNotIterated() {
         // Paper - rewrite chunk system
diff --git a/net/minecraft/world/phys/shapes/CollisionContext.java b/net/minecraft/world/phys/shapes/CollisionContext.java
index cc45784d84af4bc56dc63ce771ca7cea27573d99..32cc5747900bc5e0e54c40379dc51063ad522398 100644
--- a/net/minecraft/world/phys/shapes/CollisionContext.java
+++ b/net/minecraft/world/phys/shapes/CollisionContext.java
@@ -30,6 +30,9 @@ public interface CollisionContext {
     }
 
     static CollisionContext placementContext(@Nullable Entity entity) {
+        // Pufferfish start - lazy
+        if (true) return new EntityCollisionContext(false, true, -Double.MAX_VALUE, ItemStack.EMPTY, null, entity);
+        // Pufferfish end - lazy
         return new EntityCollisionContext(
             entity != null && entity.isDescending(),
             true,
diff --git a/net/minecraft/world/phys/shapes/EntityCollisionContext.java b/net/minecraft/world/phys/shapes/EntityCollisionContext.java
index ebc9360ea64a248418fcac8b446664b0dd019335..2d18fdf8a24023babd58b01c2e324e74148f1a2a 100644
--- a/net/minecraft/world/phys/shapes/EntityCollisionContext.java
+++ b/net/minecraft/world/phys/shapes/EntityCollisionContext.java
@@ -19,47 +19,45 @@ public class EntityCollisionContext implements CollisionContext {
             return canAscend;
         }
     };
-    private final boolean descending;
-    private final double entityBottom;
+    // Pufferfish start - lazy
     private final boolean placement;
-    private final ItemStack heldItem;
-    private final Predicate<FluidState> canStandOnFluid;
     @Nullable
     private final Entity entity;
+    private final boolean canStandOnFluid;
+    // Pufferfish end - lazy
 
     protected EntityCollisionContext(
         boolean descending, boolean placement, double entityBottom, ItemStack heldItem, Predicate<FluidState> canStandOnFluid, @Nullable Entity entity
     ) {
-        this.descending = descending;
+        // Pufferfish start - lazy
         this.placement = placement;
-        this.entityBottom = entityBottom;
-        this.heldItem = heldItem;
-        this.canStandOnFluid = canStandOnFluid;
         this.entity = entity;
+        this.canStandOnFluid = false;
+        // Pufferfish end - lazy
     }
 
     @Deprecated
     protected EntityCollisionContext(Entity entity, boolean canStandOnFluid, boolean placement) {
-        this(
-            entity.isDescending(),
-            placement,
-            entity.getY(),
-            entity instanceof LivingEntity livingEntityx ? livingEntityx.getMainHandItem() : ItemStack.EMPTY,
-            canStandOnFluid
-                ? fluidState -> true
-                : (entity instanceof LivingEntity livingEntity ? fluidState -> livingEntity.canStandOnFluid(fluidState) : fluidState -> false),
-            entity
-        );
+        // Pufferfish start - lazy
+        this.placement = placement;
+        this.entity = entity;
+        this.canStandOnFluid = canStandOnFluid;
+        // Pufferfish end - lazy
     }
 
     @Override
     public boolean isHoldingItem(Item item) {
-        return this.heldItem.is(item);
+        // Pufferfish start - lazy
+        if (this.entity instanceof LivingEntity) {
+            return ((LivingEntity) this.entity).getMainHandItem().is(item);
+        }
+        return ItemStack.EMPTY.is(item);
+        // Pufferfish end - lazy
     }
 
     @Override
     public boolean canStandOnFluid(FluidState fluid1, FluidState fluid2) {
-        return this.canStandOnFluid.test(fluid2) && !fluid1.getType().isSame(fluid2.getType());
+        return (this.canStandOnFluid || this.entity instanceof LivingEntity && ((LivingEntity) this.entity).canStandOnFluid(fluid2)) && !fluid1.getType().isSame(fluid2.getType()); // Pufferfish - lazy
     }
 
     @Override
@@ -69,12 +67,12 @@ public class EntityCollisionContext implements CollisionContext {
 
     @Override
     public boolean isDescending() {
-        return this.descending;
+        return this.entity != null && this.entity.isDescending(); // Pufferfish - lazy
     }
 
     @Override
     public boolean isAbove(VoxelShape shape, BlockPos pos, boolean canAscend) {
-        return this.entityBottom > pos.getY() + shape.max(Direction.Axis.Y) - 1.0E-5F;
+        return this.entity != null && this.entity.getY() > pos.getY() + shape.max(Direction.Axis.Y) - 1.0E-5F; // Pufferfish - lazy
     }
 
     @Nullable
