From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: booky10 <boooky10@gmail.com>
Date: Mon, 27 May 2024 03:13:37 +0200
Subject: [PATCH] Add option to translate custom item names and lore


diff --git a/net/minecraft/world/item/ItemStack.java b/net/minecraft/world/item/ItemStack.java
index 70db847aa99b350c719bd5dbe66c63dd14c93614..3d51f714920b55a8c3df31f83809ab79dc5cd4d3 100644
--- a/net/minecraft/world/item/ItemStack.java
+++ b/net/minecraft/world/item/ItemStack.java
@@ -189,7 +189,13 @@ public final class ItemStack implements DataComponentHolder {
                 } else {
                     Holder<Item> holder = Item.STREAM_CODEC.decode(buffer);
                     DataComponentPatch dataComponentPatch = codec.decode(buffer);
-                    return new ItemStack(holder, varInt, dataComponentPatch);
+                    // CloudPlane start - item localization
+                    ItemStack stack = new ItemStack(holder, varInt, dataComponentPatch);
+                    if (dev.booky.cloudplane.CloudPlaneConfig.localizeItems) {
+                        dev.booky.cloudplane.ItemUtil.unpackPatchSaves(stack);
+                    }
+                    return stack;
+                    // CloudPlane end - item localization
                 }
             }
 
@@ -200,15 +206,23 @@ public final class ItemStack implements DataComponentHolder {
                 } else {
                     buffer.writeVarInt(io.papermc.paper.util.sanitizer.ItemComponentSanitizer.sanitizeCount(io.papermc.paper.util.sanitizer.ItemObfuscationSession.currentSession(), value, value.getCount())); // Paper - potentially sanitize count
                     Item.STREAM_CODEC.encode(buffer, value.getItemHolder());
+                    // CloudPlane start - item localization
+                    if (dev.booky.cloudplane.CloudPlaneConfig.localizeItems && buffer.adventure$locale != null) {
+                        try (final io.papermc.paper.util.SafeAutoClosable ignored = io.papermc.paper.util.sanitizer.ItemObfuscationSession.withContext(c -> c.itemStack(value))) { // pass the itemstack as context to the obfuscation session
+                            codec.encode(buffer, dev.booky.cloudplane.ItemUtil.packPatchSaves(value));
+                        }
+                    } else {
+                        // CloudPlane end - item localization
                     // Paper start - adventure; conditionally render translatable components
                     boolean prev = net.minecraft.network.chat.ComponentSerialization.DONT_RENDER_TRANSLATABLES.get();
-                    try (final io.papermc.paper.util.SafeAutoClosable ignored = io.papermc.paper.util.sanitizer.ItemObfuscationSession.withContext(c -> c.itemStack(value))) { // pass the itemstack as context to the obfuscation session
+                    try (final io.papermc.paper.util.SafeAutoClosable ignored = io.papermc.paper.util.sanitizer.ItemObfuscationSession.withContext(c -> c.itemStack(value))) { // pass the itemstack as context to the obfuscation session // CloudPlane - item localization; diff on change
                         net.minecraft.network.chat.ComponentSerialization.DONT_RENDER_TRANSLATABLES.set(true);
-                    codec.encode(buffer, value.components.asPatch());
+                    codec.encode(buffer, value.components.asPatch()); // CloudPlane - item localization; diff on change
                     } finally {
                         net.minecraft.network.chat.ComponentSerialization.DONT_RENDER_TRANSLATABLES.set(prev);
                     }
                     // Paper end - adventure; conditionally render translatable components
+                    } // CloudPlane - item localization
                 }
             }
         };
diff --git a/net/minecraft/world/item/component/ItemLore.java b/net/minecraft/world/item/component/ItemLore.java
index a26a2902b900b58e2ec861dfec9745a1dbc7a6be..23bcc7f96bc7a7f41eee5abd99678d8522d13484 100644
--- a/net/minecraft/world/item/component/ItemLore.java
+++ b/net/minecraft/world/item/component/ItemLore.java
@@ -42,6 +42,36 @@ public record ItemLore(List<Component> lines, List<Component> styledLines) imple
                 }
                 return realLines;
             })
+            // CloudPlane start - item localization; line splitting support
+            .<List<Component>>apply(codec -> new StreamCodec<>() {
+                @Override
+                public List<Component> decode(RegistryFriendlyByteBuf buf) {
+                    return codec.decode(buf);
+                }
+
+                @Override
+                public void encode(RegistryFriendlyByteBuf buf, List<Component> value) {
+                    if (dev.booky.cloudplane.CloudPlaneConfig.localizeItems && buf.adventure$locale != null) {
+                        // pre-render translations here to work around line splitting not working anymore
+                        boolean prevNoRender = ComponentSerialization.DONT_RENDER_TRANSLATABLES.get();
+                        try {
+                            ComponentSerialization.DONT_RENDER_TRANSLATABLES.set(true);
+                            List<Component> lines = Lists.newArrayListWithCapacity(value.size());
+                            for (Component line : value) {
+                                net.kyori.adventure.text.Component advLine = io.papermc.paper.adventure.PaperAdventure.asAdventure(line);
+                                net.kyori.adventure.text.Component i18nLine = net.kyori.adventure.translation.GlobalTranslator.render(advLine, buf.adventure$locale);
+                                lines.add(io.papermc.paper.adventure.PaperAdventure.asVanilla(i18nLine));
+                            }
+                            codec.encode(buf, lines);
+                        } finally {
+                            ComponentSerialization.DONT_RENDER_TRANSLATABLES.set(prevNoRender);
+                        }
+                    } else {
+                        codec.encode(buf, value);
+                    }
+                }
+            })
+            // CloudPlane end - item localization; line splitting support
             .map(ItemLore::new, ItemLore::lines);
     // CloudPlane end - split lore lines
 
diff --git a/net/minecraft/world/item/trading/ItemCost.java b/net/minecraft/world/item/trading/ItemCost.java
index 02cc7a23a0fb6a9e4ed88578606c40d5d2301ae1..fe41f833d72cdfd9de7329c72a7497b22d9b5db2 100644
--- a/net/minecraft/world/item/trading/ItemCost.java
+++ b/net/minecraft/world/item/trading/ItemCost.java
@@ -32,7 +32,7 @@ public record ItemCost(Holder<Item> item, int count, DataComponentExactPredicate
         DataComponentExactPredicate.STREAM_CODEC,
         ItemCost::components,
         ItemCost::new
-    );
+    ).map(dev.booky.cloudplane.ItemUtil::unpackPatchSaves, dev.booky.cloudplane.ItemUtil::packPatchSaves); // CloudPlane - item translations; fix merchant offers de-sync
     public static final StreamCodec<RegistryFriendlyByteBuf, Optional<ItemCost>> OPTIONAL_STREAM_CODEC = STREAM_CODEC.apply(ByteBufCodecs::optional);
 
     public ItemCost(ItemLike item) {
