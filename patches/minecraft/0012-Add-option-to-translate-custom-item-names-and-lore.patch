From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: booky10 <boooky10@gmail.com>
Date: Mon, 27 May 2024 03:13:37 +0200
Subject: [PATCH] Add option to translate custom item names and lore


diff --git a/net/minecraft/world/item/ItemStack.java b/net/minecraft/world/item/ItemStack.java
index f012ea0b1bbadfdbd828dd1118f2b2272553d37c..e0df05efb492b1bf4bf1bc0042eb1b6e3a313f3a 100644
--- a/net/minecraft/world/item/ItemStack.java
+++ b/net/minecraft/world/item/ItemStack.java
@@ -141,6 +141,11 @@ public final class ItemStack implements DataComponentHolder {
                 if (false && !dataComponentPatch.isEmpty()) { // Paper - This is no longer needed with raw NBT being handled in metadata
                     org.bukkit.craftbukkit.inventory.CraftItemStack.setItemMeta(stack, org.bukkit.craftbukkit.inventory.CraftItemStack.getItemMeta(stack));
                 }
+                // CloudPlane start - item localization
+                if (dev.booky.cloudplane.CloudPlaneConfig.localizeItems) {
+                    dev.booky.cloudplane.ItemUtil.unpackPatchSaves(stack);
+                }
+                // CloudPlane end - item localization
                 return stack;
                 // CraftBukkit end
             }
@@ -153,18 +158,26 @@ public final class ItemStack implements DataComponentHolder {
             } else {
                 buffer.writeVarInt(io.papermc.paper.util.ItemComponentSanitizer.sanitizeCount(io.papermc.paper.util.ItemObfuscationSession.currentSession(), value, value.getCount())); // Paper - potentially sanitize count
                 ITEM_STREAM_CODEC.encode(buffer, value.getItemHolder());
+                // CloudPlane start - item localization
+                if (dev.booky.cloudplane.CloudPlaneConfig.localizeItems && buffer.adventure$locale != null) {
+                    try (final io.papermc.paper.util.SafeAutoClosable ignored = io.papermc.paper.util.ItemObfuscationSession.withContext(c -> c.itemStack(value))) { // pass the itemstack as context to the obfuscation session
+                        DataComponentPatch.STREAM_CODEC.encode(buffer, dev.booky.cloudplane.ItemUtil.packPatchSaves(value));
+                    }
+                } else {
+                    // CloudPlane end - item localization
                 // Spigot start - filter
                 // value = value.copy();
                 // CraftItemStack.setItemMeta(value, CraftItemStack.getItemMeta(value)); // Paper - This is no longer with raw NBT being handled in metadata
                 // Paper start - adventure; conditionally render translatable components
                 boolean prev = net.minecraft.network.chat.ComponentSerialization.DONT_RENDER_TRANSLATABLES.get();
-                try (final io.papermc.paper.util.SafeAutoClosable ignored = io.papermc.paper.util.ItemObfuscationSession.withContext(c -> c.itemStack(value))) { // pass the itemstack as context to the obfuscation session
+                try (final io.papermc.paper.util.SafeAutoClosable ignored = io.papermc.paper.util.ItemObfuscationSession.withContext(c -> c.itemStack(value))) { // pass the itemstack as context to the obfuscation session // CloudPlane - item localization; diff on change
                     net.minecraft.network.chat.ComponentSerialization.DONT_RENDER_TRANSLATABLES.set(true);
-                DataComponentPatch.STREAM_CODEC.encode(buffer, value.components.asPatch());
+                DataComponentPatch.STREAM_CODEC.encode(buffer, value.components.asPatch()); // CloudPlane - item localization; diff on change
                 } finally {
                     net.minecraft.network.chat.ComponentSerialization.DONT_RENDER_TRANSLATABLES.set(prev);
                 }
                 // Paper end - adventure; conditionally render translatable components
+                } // CloudPlane - item localization
             }
         }
     };
diff --git a/net/minecraft/world/item/component/ItemLore.java b/net/minecraft/world/item/component/ItemLore.java
index 59a1acea4133f633dce1901522d5e7c75cf8ad55..560bbd809c82e0f4f4b8ce55818c26177aabb993 100644
--- a/net/minecraft/world/item/component/ItemLore.java
+++ b/net/minecraft/world/item/component/ItemLore.java
@@ -41,6 +41,36 @@ public record ItemLore(List<Component> lines, List<Component> styledLines) imple
                 }
                 return realLines;
             })
+            // CloudPlane start - item localization; line splitting support
+            .<List<Component>>apply(codec -> new StreamCodec<>() {
+                @Override
+                public List<Component> decode(RegistryFriendlyByteBuf buf) {
+                    return codec.decode(buf);
+                }
+
+                @Override
+                public void encode(RegistryFriendlyByteBuf buf, List<Component> value) {
+                    if (dev.booky.cloudplane.CloudPlaneConfig.localizeItems && buf.adventure$locale != null) {
+                        // pre-render translations here to work around line splitting not working anymore
+                        boolean prevNoRender = ComponentSerialization.DONT_RENDER_TRANSLATABLES.get();
+                        try {
+                            ComponentSerialization.DONT_RENDER_TRANSLATABLES.set(true);
+                            List<Component> lines = Lists.newArrayListWithCapacity(value.size());
+                            for (Component line : value) {
+                                net.kyori.adventure.text.Component advLine = io.papermc.paper.adventure.PaperAdventure.asAdventure(line);
+                                net.kyori.adventure.text.Component i18nLine = net.kyori.adventure.translation.GlobalTranslator.render(advLine, buf.adventure$locale);
+                                lines.add(io.papermc.paper.adventure.PaperAdventure.asVanilla(i18nLine));
+                            }
+                            codec.encode(buf, lines);
+                        } finally {
+                            ComponentSerialization.DONT_RENDER_TRANSLATABLES.set(prevNoRender);
+                        }
+                    } else {
+                        codec.encode(buf, value);
+                    }
+                }
+            })
+            // CloudPlane end - item localization; line splitting support
             .map(ItemLore::new, ItemLore::lines);
     // CloudPlane end - split lore lines
 
diff --git a/net/minecraft/world/item/trading/ItemCost.java b/net/minecraft/world/item/trading/ItemCost.java
index d88002dad6bc443d592dcb891f9ee5e04e043a11..6bdea27ab3167e15d1479fc82509c7679aba4fe4 100644
--- a/net/minecraft/world/item/trading/ItemCost.java
+++ b/net/minecraft/world/item/trading/ItemCost.java
@@ -33,7 +33,7 @@ public record ItemCost(Holder<Item> item, int count, DataComponentPredicate comp
         DataComponentPredicate.STREAM_CODEC,
         ItemCost::components,
         ItemCost::new
-    );
+    ).map(dev.booky.cloudplane.ItemUtil::unpackPatchSaves, dev.booky.cloudplane.ItemUtil::packPatchSaves); // CloudPlane - item translations; fix merchant offers de-sync
     public static final StreamCodec<RegistryFriendlyByteBuf, Optional<ItemCost>> OPTIONAL_STREAM_CODEC = STREAM_CODEC.apply(ByteBufCodecs::optional);
 
     public ItemCost(ItemLike item) {
