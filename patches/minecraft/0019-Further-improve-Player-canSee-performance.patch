From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: booky10 <boooky10@gmail.com>
Date: Fri, 20 Sep 2024 01:13:04 +0200
Subject: [PATCH] Further improve Player#canSee performance


diff --git a/net/minecraft/world/entity/Entity.java b/net/minecraft/world/entity/Entity.java
index 78a169a0106583b63bdfba2436b230ef4aac55b3..028ffeba7eb2381e8ca8fba72d54168a18064e15 100644
--- a/net/minecraft/world/entity/Entity.java
+++ b/net/minecraft/world/entity/Entity.java
@@ -297,6 +297,15 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     private boolean invulnerable;
     protected UUID uuid = Mth.createInsecureUUID(this.random);
     protected String stringUUID = this.uuid.toString();
+    // CloudPlane start - further improve Player#canSee performance;
+    // combine UUID to single value to allow for easier hashmap lookups
+    // and allow using fastutil number sets
+    // this is less "secure" than using a full UUID, but should still not cause
+    // any collisions on this non-distributed system
+    // there may be a slight chance for collision, but this chance
+    // is way too small to actually account for
+    public long longUUID = this.uuid.getMostSignificantBits() ^ this.uuid.getLeastSignificantBits();
+    // CloudPlane end - further improve Player#canSee performance
     private boolean hasGlowingTag;
     private final Set<String> tags = new io.papermc.paper.util.SizeLimitedSet<>(new it.unimi.dsi.fastutil.objects.ObjectOpenHashSet<>(), MAX_ENTITY_TAG_COUNT); // Paper - fully limit tag size - replace set impl
     private final double[] pistonDeltas = new double[]{0.0, 0.0, 0.0};
@@ -522,6 +531,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
         this.position = Vec3.ZERO;
         this.blockPosition = BlockPos.ZERO;
         this.chunkPosition = ChunkPos.ZERO;
+        this.setUUID(this.uuid); // CloudPlane - further improve Player#canSee performance; call common setter
         // Paper start - EAR 2
         if (level != null) {
             this.defaultActivationState = io.papermc.paper.entity.activation.ActivationRange.initializeEntityActivationState(this, level.spigotConfig);
@@ -2549,8 +2559,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
             this.invulnerable = compound.getBooleanOr("Invulnerable", false);
             this.portalCooldown = compound.getIntOr("PortalCooldown", 0);
             compound.read("UUID", UUIDUtil.CODEC).ifPresent(uuid -> {
-                this.uuid = uuid;
-                this.stringUUID = this.uuid.toString();
+                this.setUUID(uuid); // CloudPlane - further improve Player#canSee performance; call common setter
             });
             if (!Double.isFinite(this.getX()) || !Double.isFinite(this.getY()) || !Double.isFinite(this.getZ())) {
                 throw new IllegalStateException("Entity has invalid position");
@@ -3989,6 +3998,9 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     public void setUUID(UUID uniqueId) {
         this.uuid = uniqueId;
         this.stringUUID = this.uuid.toString();
+        // CloudPlane start - further improve Player#canSee performance
+        this.longUUID = this.uuid.getMostSignificantBits() ^ this.uuid.getLeastSignificantBits();
+        // CloudPlane end - further improve Player#canSee performance
     }
 
     @Override
@@ -4000,6 +4012,12 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
         return this.stringUUID;
     }
 
+    // CloudPlane start - further improve Player#canSee performance
+    public final long getLongUUID() {
+        return this.longUUID;
+    }
+    // CloudPlane end - further improve Player#canSee performance
+
     @Override
     public String getScoreboardName() {
         return this.stringUUID;
