From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: booky10 <boooky10@gmail.com>
Date: Sun, 5 Jan 2025 21:28:12 +0100
Subject: [PATCH] Convert chunk heightmaps to array


diff --git a/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java b/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
index 33ca4c2110673dee34b66c8d05ee83c4df828f2e..f1462d68c6ab5aaef13dd97a06c7560d47235755 100644
--- a/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
+++ b/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
@@ -25,11 +25,16 @@ import net.minecraft.world.level.chunk.LevelChunkSection;
 import net.minecraft.world.level.levelgen.Heightmap;
 
 public class ClientboundLevelChunkPacketData {
+    // CloudPlane start - convert heightmaps to array
+    public static final Heightmap.Types[] SENDABLE_HEIGHTMAP_TYPES = java.util.Arrays.stream(Heightmap.Types.values())
+            .filter(Heightmap.Types::sendToClient).toArray(Heightmap.Types[]::new);
+    public static final int SENDABLE_HEIGHTMAP_TYPES_LEN = SENDABLE_HEIGHTMAP_TYPES.length;
+    // CloudPlane end - convert heightmaps to array
     private static final StreamCodec<ByteBuf, Map<Heightmap.Types, long[]>> HEIGHTMAPS_STREAM_CODEC = ByteBufCodecs.map(
         i -> new EnumMap<>(Heightmap.Types.class), Heightmap.Types.STREAM_CODEC, ByteBufCodecs.LONG_ARRAY
     );
     private static final int TWO_MEGABYTES = 2097152;
-    private final Map<Heightmap.Types, long[]> heightmaps;
+    private final byte[] heightmaps; // CloudPlane end - convert heightmaps to array
     private final byte[] buffer;
     private final List<ClientboundLevelChunkPacketData.BlockEntityInfo> blockEntitiesData;
     // Paper start - Handle oversized block entities in chunks
@@ -48,10 +53,33 @@ public class ClientboundLevelChunkPacketData {
     }
     public ClientboundLevelChunkPacketData(LevelChunk levelChunk, io.papermc.paper.antixray.ChunkPacketInfo<net.minecraft.world.level.block.state.BlockState> chunkPacketInfo) {
         // Paper end - Anti-Xray - Add chunk packet info
-        this.heightmaps = levelChunk.getHeightmaps()
-            .stream()
-            .filter(entry1 -> entry1.getKey().sendToClient())
-            .collect(Collectors.toMap(Entry::getKey, entry1 -> (long[])entry1.getValue().getRawData().clone()));
+        // CloudPlane start - convert heightmaps to array
+        int heightmapCount = 0;
+        int heightmapSize = 0;
+        for (int i = 0; i < SENDABLE_HEIGHTMAP_TYPES_LEN; ++i) {
+            final Heightmap.Types type = SENDABLE_HEIGHTMAP_TYPES[i];
+            final Heightmap heightmap = levelChunk.heightmaps[type.ordinal()];
+            if (heightmap != null) {
+                heightmapCount++;
+                heightmapSize += net.minecraft.network.VarInt.getByteSize(type.ordinal())
+                        + net.minecraft.network.VarInt.getByteSize(heightmap.getRawData().length)
+                        + heightmap.getRawData().length * Long.BYTES;
+            }
+        }
+        heightmapSize += net.minecraft.network.VarInt.getByteSize(heightmapCount);
+        this.heightmaps = new byte[heightmapSize];
+        ByteBuf heightmapBuf = Unpooled.wrappedBuffer(this.heightmaps);
+        heightmapBuf.writerIndex(0);
+        net.minecraft.network.VarInt.write(heightmapBuf, heightmapCount);
+        for (int i = 0; i < SENDABLE_HEIGHTMAP_TYPES_LEN; ++i) {
+            final Heightmap.Types type = SENDABLE_HEIGHTMAP_TYPES[i];
+            final Heightmap heightmap = levelChunk.heightmaps[type.ordinal()];
+            if (heightmap != null) {
+                net.minecraft.network.VarInt.write(heightmapBuf, type.ordinal());
+                FriendlyByteBuf.writeLongArray(heightmapBuf, heightmap.getRawData());
+            }
+        }
+        // CloudPlane end - convert heightmaps to array
         this.buffer = new byte[calculateChunkSize(levelChunk)];
         // Paper start - Anti-Xray - Add chunk packet info
         if (chunkPacketInfo != null) {
@@ -76,7 +104,7 @@ public class ClientboundLevelChunkPacketData {
     }
 
     public ClientboundLevelChunkPacketData(RegistryFriendlyByteBuf buffer, int x, int z) {
-        this.heightmaps = HEIGHTMAPS_STREAM_CODEC.decode(buffer);
+        if (true) throw new UnsupportedOperationException(); // CloudPlane end - convert heightmaps to array
         int varInt = buffer.readVarInt();
         if (varInt > 2097152) { // Paper - diff on change - if this changes, update PacketEncoder
             throw new RuntimeException("Chunk Packet trying to allocate too much memory on read.");
@@ -88,7 +116,7 @@ public class ClientboundLevelChunkPacketData {
     }
 
     public void write(RegistryFriendlyByteBuf buffer) {
-        HEIGHTMAPS_STREAM_CODEC.encode(buffer, this.heightmaps);
+        buffer.writeBytes(this.heightmaps);// CloudPlane end - convert heightmaps to array
         buffer.writeVarInt(this.buffer.length);
         buffer.writeBytes(this.buffer);
         ClientboundLevelChunkPacketData.BlockEntityInfo.LIST_STREAM_CODEC.encode(buffer, this.blockEntitiesData);
@@ -150,7 +178,7 @@ public class ClientboundLevelChunkPacketData {
     }
 
     public Map<Heightmap.Types, long[]> getHeightmaps() {
-        return this.heightmaps;
+        throw new UnsupportedOperationException(); // CloudPlane end - convert heightmaps to array
     }
 
     static class BlockEntityInfo {
diff --git a/net/minecraft/world/level/chunk/ChunkAccess.java b/net/minecraft/world/level/chunk/ChunkAccess.java
index 98b7e1e3b8592824c69a9647a82621755526c71a..5e92d1fa045841e6b500c3062110fced139293e1 100644
--- a/net/minecraft/world/level/chunk/ChunkAccess.java
+++ b/net/minecraft/world/level/chunk/ChunkAccess.java
@@ -74,7 +74,7 @@ public abstract class ChunkAccess implements BiomeManager.NoiseBiomeSource, Ligh
     protected final UpgradeData upgradeData;
     @Nullable
     protected BlendingData blendingData;
-    public final Map<Heightmap.Types, Heightmap> heightmaps = Maps.newEnumMap(Heightmap.Types.class);
+    public final @org.jspecify.annotations.Nullable Heightmap[] heightmaps = new Heightmap[Heightmap.Types.values().length]; // CloudPlane - convert heightmaps to array
     // Paper - rewrite chunk system
     private final Map<Structure, StructureStart> structureStarts = Maps.newHashMap();
     private final Map<Structure, LongSet> structuresRefences = Maps.newHashMap();
@@ -238,31 +238,42 @@ public abstract class ChunkAccess implements BiomeManager.NoiseBiomeSource, Ligh
         return this.getSections()[index];
     }
 
+    // CloudPlane start - convert heightmaps to array
+    @io.papermc.paper.annotation.DoNotUse
+    @Deprecated
     public Collection<Entry<Heightmap.Types, Heightmap>> getHeightmaps() {
-        return Collections.unmodifiableSet(this.heightmaps.entrySet());
+        throw new UnsupportedOperationException();
     }
+    // CloudPlane end - convert heightmaps to array
 
     public void setHeightmap(Heightmap.Types type, long[] data) {
         this.getOrCreateHeightmapUnprimed(type).setRawData(this, type, data);
     }
 
     public Heightmap getOrCreateHeightmapUnprimed(Heightmap.Types type) {
-        return this.heightmaps.computeIfAbsent(type, absentType -> new Heightmap(this, absentType));
+        // CloudPlane start - convert heightmaps to array
+        Heightmap heightmap = this.heightmaps[type.ordinal()];
+        if (heightmap == null) {
+            heightmap = new Heightmap(this, type);
+            this.heightmaps[type.ordinal()] = heightmap;
+        }
+        return heightmap;
+        // CloudPlane end - convert heightmaps to array
     }
 
     public boolean hasPrimedHeightmap(Heightmap.Types type) {
-        return this.heightmaps.get(type) != null;
+        return this.heightmaps[type.ordinal()] != null; // CloudPlane - convert heightmaps to array
     }
 
     public int getHeight(Heightmap.Types type, int x, int z) {
-        Heightmap heightmap = this.heightmaps.get(type);
+        Heightmap heightmap = this.heightmaps[type.ordinal()]; // CloudPlane - convert heightmaps to array
         if (heightmap == null) {
             if (SharedConstants.IS_RUNNING_IN_IDE && this instanceof LevelChunk) {
                 LOGGER.error("Unprimed heightmap: {} {} {}", type, x, z);
             }
 
             Heightmap.primeHeightmaps(this, EnumSet.of(type));
-            heightmap = this.heightmaps.get(type);
+            heightmap = this.heightmaps[type.ordinal()]; // CloudPlane - convert heightmaps to array
         }
 
         return heightmap.getFirstAvailable(x & 15, z & 15) - 1;
diff --git a/net/minecraft/world/level/chunk/LevelChunk.java b/net/minecraft/world/level/chunk/LevelChunk.java
index d40c6c687fd41dd73574aee8929e1253c0d24e4c..a69bc477c3388144718afbf75e61b3cdc7ff21c1 100644
--- a/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/net/minecraft/world/level/chunk/LevelChunk.java
@@ -169,11 +169,11 @@ public class LevelChunk extends ChunkAccess implements DebugValueSource, ca.spot
         this.level = (ServerLevel) level; // CraftBukkit - type
         this.gameEventListenerRegistrySections = new Int2ObjectOpenHashMap<>();
 
-        for (Heightmap.Types types : Heightmap.Types.values()) {
-            if (ChunkStatus.FULL.heightmapsAfter().contains(types)) {
-                this.heightmaps.put(types, new Heightmap(this, types));
-            }
+        // CloudPlane start - convert heightmaps to array
+        for (Heightmap.Types types : ChunkStatus.FULL.heightmapsAfter()) {
+            this.heightmaps[types.ordinal()] = new Heightmap(this, types);
         }
+        // CloudPlane end - convert heightmaps to array
 
         this.postLoad = postLoad;
         this.blockTicks = blockTicks;
@@ -219,11 +219,14 @@ public class LevelChunk extends ChunkAccess implements DebugValueSource, ca.spot
         this.setAllStarts(chunk.getAllStarts());
         this.setAllReferences(chunk.getAllReferences());
 
-        for (Entry<Heightmap.Types, Heightmap> entry : chunk.getHeightmaps()) {
-            if (ChunkStatus.FULL.heightmapsAfter().contains(entry.getKey())) {
-                this.setHeightmap(entry.getKey(), entry.getValue().getRawData());
+        // CloudPlane start - convert heightmaps to array
+        for (Heightmap.Types type : ChunkStatus.FULL.heightmapsAfter()) {
+            Heightmap heightmap = chunk.heightmaps[type.ordinal()];
+            if (heightmap != null) {
+                this.setHeightmap(type, heightmap.getRawData());
             }
         }
+        // CloudPlane end - convert heightmaps to array
 
         // Paper - rewrite chunk system
         this.setLightCorrect(chunk.isLightCorrect());
@@ -396,10 +399,10 @@ public class LevelChunk extends ChunkAccess implements DebugValueSource, ca.spot
                 return null;
             } else {
                 Block block = state.getBlock();
-                this.heightmaps.get(Heightmap.Types.MOTION_BLOCKING).update(i, y, i2, state);
-                this.heightmaps.get(Heightmap.Types.MOTION_BLOCKING_NO_LEAVES).update(i, y, i2, state);
-                this.heightmaps.get(Heightmap.Types.OCEAN_FLOOR).update(i, y, i2, state);
-                this.heightmaps.get(Heightmap.Types.WORLD_SURFACE).update(i, y, i2, state);
+                this.heightmaps[Heightmap.Types.MOTION_BLOCKING.ordinal()].update(i, y, i2, state); // CloudPlane - convert heightmaps to array
+                this.heightmaps[Heightmap.Types.MOTION_BLOCKING_NO_LEAVES.ordinal()].update(i, y, i2, state); // CloudPlane - convert heightmaps to array
+                this.heightmaps[Heightmap.Types.OCEAN_FLOOR.ordinal()].update(i, y, i2, state); // CloudPlane - convert heightmaps to array
+                this.heightmaps[Heightmap.Types.WORLD_SURFACE.ordinal()].update(i, y, i2, state); // CloudPlane - convert heightmaps to array
                 boolean hasOnlyAir1 = section.hasOnlyAir();
                 if (hasOnlyAir != hasOnlyAir1) {
                     this.level.getChunkSource().getLightEngine().updateSectionStatus(pos, hasOnlyAir1);
diff --git a/net/minecraft/world/level/chunk/ProtoChunk.java b/net/minecraft/world/level/chunk/ProtoChunk.java
index 456d301d45350fb15de5ab663c482257e607f3aa..14d991060f52b1f67b46e9ca5afc650ce2b8e8ec 100644
--- a/net/minecraft/world/level/chunk/ProtoChunk.java
+++ b/net/minecraft/world/level/chunk/ProtoChunk.java
@@ -167,7 +167,7 @@ public class ProtoChunk extends ChunkAccess {
                 EnumSet<Heightmap.Types> set1 = null;
 
                 for (Heightmap.Types types : set) {
-                    Heightmap heightmap = this.heightmaps.get(types);
+                    Heightmap heightmap = this.heightmaps[types.ordinal()]; // CloudPlane - convert heightmaps to array
                     if (heightmap == null) {
                         if (set1 == null) {
                             set1 = EnumSet.noneOf(Heightmap.Types.class);
@@ -182,7 +182,7 @@ public class ProtoChunk extends ChunkAccess {
                 }
 
                 for (Heightmap.Types typesx : set) {
-                    this.heightmaps.get(typesx).update(relativeBlockPosX, y, relativeBlockPosZ, state);
+                    this.heightmaps[typesx.ordinal()].update(relativeBlockPosX, y, relativeBlockPosZ, state); // CloudPlane - convert heightmaps to array
                 }
 
                 return blockState;
diff --git a/net/minecraft/world/level/chunk/storage/SerializableChunkData.java b/net/minecraft/world/level/chunk/storage/SerializableChunkData.java
index 2e8a1898c9ef8bbfd58ea1e9fbd7f6a633822fb9..6efdf7a2ebf2ae5833d92eb88f00920d253f6e8b 100644
--- a/net/minecraft/world/level/chunk/storage/SerializableChunkData.java
+++ b/net/minecraft/world/level/chunk/storage/SerializableChunkData.java
@@ -514,12 +514,15 @@ public record SerializableChunkData(
 
             Map<Heightmap.Types, long[]> map = new EnumMap<>(Heightmap.Types.class);
 
-            for (Entry<Heightmap.Types, Heightmap> entry : chunk.getHeightmaps()) {
-                if (chunk.getPersistedStatus().heightmapsAfter().contains(entry.getKey())) {
-                    long[] rawData = entry.getValue().getRawData();
-                    map.put(entry.getKey(), (long[])rawData.clone());
+            // CloudPlane start - convert heightmaps to array
+            for (Heightmap.Types type : chunk.getPersistedStatus().heightmapsAfter()) {
+                Heightmap heightmap = chunk.heightmaps[type.ordinal()];
+                if (heightmap != null) {
+                    long[] rawData = heightmap.getRawData();
+                    map.put(type, (long[])rawData.clone());
                 }
             }
+            // CloudPlane end - convert heightmaps to array
 
             ChunkAccess.PackedTicks ticksForSerialization = chunk.getTicksForSerialization(level.getGameTime());
             ShortList[] lists = Arrays.stream(chunk.getPostProcessing())
