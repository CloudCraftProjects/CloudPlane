From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: booky10 <boooky10@gmail.com>
Date: Sat, 1 Mar 2025 01:45:59 +0100
Subject: [PATCH] Setup paperweight fork changes


diff --git a/build.gradle.kts b/build.gradle.kts
index b910370958d4e82c23638a42733c5f3f74849c9d..222006bf61bb4a8043ce2d7cc9f7cc428dd7ea25 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -26,6 +26,25 @@ paperweight {
     minecraftVersion = providers.gradleProperty("mcVersion")
     gitFilePatches = false
 
+    // CloudPlane start - setup paperweight fork
+    val cloudplane = forks.register("cloudplane") {
+        serverPatchesDir = rootDirectory.dir("patches/minecraft")
+        featurePatchDir = serverPatchesDir.dir(".")
+        upstream.patchDir("paperServer") {
+            upstreamPath = "paper-server"
+            excludes = setOf("src/minecraft", "patches", "build.gradle.kts")
+            patchesDir = rootDirectory.dir("patches/server")
+            featurePatchDir = patchesDir.dir(".")
+            outputDir = rootDirectory.dir("paper-server")
+        }
+    }
+    activeFork = cloudplane
+
+    paper {
+        paperServerDir = upstreamsDirectory().map { it.dir("paper/paper-server") } // CloudPlane - setup paperweight fork
+    }
+    // CloudPlane end - setup paperweight fork
+
     spigot {
         enabled = true
         buildDataRef = "436eac9815c211be1a2a6ca0702615f995e81c44"
@@ -112,12 +131,30 @@ sourceSets {
     main {
         java {
             srcDir("src/main/pufferfish")
+            // CloudPlane start - configure actual server sources
+            srcDir("../paper-server/src/main/java")
+        }
+        resources {
+            srcDir("../paper-server/src/main/resources")
+        }
+    }
+    test {
+        java {
+            srcDir("../paper-server/src/test/java")
         }
+        resources {
+            srcDir("../paper-server/src/test/resources")
+        }
+        // CloudPlane end - configure actual server sources
     }
 }
 // Pufferfish end
 
-val log4jPlugins = sourceSets.create("log4jPlugins")
+// CloudPlane start - configure actual server sources
+val log4jPlugins = sourceSets.create("log4jPlugins") {
+    java { srcDir("../paper-server/src/log4jPlugins/java") }
+}
+// CloudPlane end - configure actual server sources
 configurations.named(log4jPlugins.compileClasspathConfigurationName) {
     extendsFrom(configurations.compileClasspath.get())
 }
@@ -139,7 +176,7 @@ abstract class MockitoAgentProvider : CommandLineArgumentProvider {
 }
 
 dependencies {
-    implementation(project(":paper-api"))
+    implementation(projects.cloudplaneApi) // CloudPlane - update to own api
     implementation("ca.spottedleaf:concurrentutil:0.0.3")
     implementation("org.jline:jline-terminal-ffm:3.27.1") // use ffm on java 22+
     implementation("org.jline:jline-terminal-jni:3.27.1") // fall back to jni on java 21
@@ -285,7 +322,7 @@ tasks.test {
     jvmArgumentProviders.add(provider)
 }
 
-val generatedDir: java.nio.file.Path = layout.projectDirectory.dir("src/generated/java").asFile.toPath()
+val generatedDir: java.nio.file.Path = layout.projectDirectory.dir("../paper-server/src/generated/java").asFile.toPath()
 idea {
     module {
         generatedSourceDirs.add(generatedDir.toFile())
@@ -405,3 +442,12 @@ fill {
         }
     }
 }
+
+// CloudPlane start - work around strange paperweight madness
+afterEvaluate {
+    if (tasks.names.contains("importCloudplaneLibraryFiles")) {
+        tasks["importCloudplaneLibraryFiles"].mustRunAfter(tasks["rebuildMinecraftResourcePatches"])
+        tasks["collectCloudplaneATsFromPatches"].mustRunAfter(tasks["rebuildMinecraftResourcePatches"])
+    }
+}
+// CloudPlane end - work around strange paperweight madness
